<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      
        <title>No Title</title>
      
      <link href="/2025/06/06/%E8%A7%86%E9%A2%91%E4%B8%8E%E7%BD%AE%E9%A1%B6%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/"/>
      <url>/2025/06/06/%E8%A7%86%E9%A2%91%E4%B8%8E%E7%BD%AE%E9%A1%B6%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      
        <title>个人作品集</title>
      
      <link href="/2025/06/01/Lnterlink_%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81%E9%9B%86/"/>
      <url>/2025/06/01/Lnterlink_%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Lnterlink-马德盛-作品集"><a href="#Lnterlink-马德盛-作品集" class="headerlink" title="Lnterlink-马德盛  作品集"></a>Lnterlink-马德盛  作品集</h1><hr><h4 id="您好，我是Lnterlink马德盛，这个网站是我的博客。"><a href="#您好，我是Lnterlink马德盛，这个网站是我的博客。" class="headerlink" title="您好，我是Lnterlink马德盛，这个网站是我的博客。"></a>您好，我是Lnterlink马德盛，这个网站是我的博客。</h4><h4 id="这里是我的作品集，也是我的试错轨迹。"><a href="#这里是我的作品集，也是我的试错轨迹。" class="headerlink" title="这里是我的作品集，也是我的试错轨迹。"></a>这里是我的作品集，也是我的试错轨迹。</h4><blockquote><p><a href="https://pan.baidu.com/s/1RCs0rhoIkI04FkTP2jMjcg?pwd=apqx">作品集网盘链接</a></p></blockquote><hr><h2 id="2023年秋至今"><a href="#2023年秋至今" class="headerlink" title="2023年秋至今"></a>2023年秋至今</h2><h2 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h2><p>在城市与田野中寻找希望。</p><p align="center">  <img src="/img/2023年秋.jpg" alt="2023年秋-2024年夏" style="box-shadow: 0 0 8px rgba(0,0,0,0.1); max-width: 100%;"></p><h2 id="图片设计"><a href="#图片设计" class="headerlink" title="图片设计"></a>图片设计</h2><p>参与学院联合中新网、《党建》杂志等平台新年春节定制贺帖项目</p><p>在中新网、福州文旅局微博等平台展示</p><p align="center">  <img src="/img/新春海报.jpg" alt="2023年秋-2024年夏" style="box-shadow: 0 0 8px rgba(0,0,0,0.1); max-width: 100%;"></p><p>相关信息跳转链接：<a href="https://mp.weixin.qq.com/s/UtmlfMHRIVNuxKPfM8GOjw">中新网链接</a>；<a href="https://mp.weixin.qq.com/s/-Ux31s87XlLkdPu15yLo7A">《党建》杂志网站链接</a>；<a href="https://m.weibo.cn/status/5128113320888270?sourceType=weixin&from=10F1295060&wm=9006_2001&featurecode=newtitle&s_channel=4&s_trans=1996447745_5128113320888270&jumpfrom=weibocom">福州文旅局微博链接</a></p><hr><h2 id="短片-脚本、拍摄、剪辑与动画效果"><a href="#短片-脚本、拍摄、剪辑与动画效果" class="headerlink" title="短片  脚本、拍摄、剪辑与动画效果"></a>短片  脚本、拍摄、剪辑与动画效果</h2><p>《路边野餐》预告片剪辑</p><iframe  src="//player.bilibili.com/player.html?isOutside=true&aid=114635411819437&bvid=BV1iNTTzmEGQ&cid=30349592203&p=1&autoplay=0"  scrolling="no"  frameborder="no"  framespacing="0"  allowfullscreen="true"  style="width: 100%; height: 500px;"></iframe><p>对北京南站爱心服务区的节前采访</p><iframe  src="//player.bilibili.com/player.html?isOutside=true&aid=114635864805121&bvid=BV1CUTKzbEDM&cid=30351689369&p=1&autoplay=0"   scrolling="no"  frameborder="no"  framespacing="0"  allowfullscreen="true"  style="width: 100%; height: 500px;"></iframe><hr><h2 id="HTML5新媒体设计"><a href="#HTML5新媒体设计" class="headerlink" title="HTML5新媒体设计"></a>HTML5新媒体设计</h2><h2 id="创意公益设计-安途·声"><a href="#创意公益设计-安途·声" class="headerlink" title="创意公益设计 安途·声"></a>创意公益设计 安途·声</h2><p>用音乐治愈晕车患者</p><p>应用内样式：</p><p align="center">  <img src="/img/安途声.jpg" alt="2023年秋-2024年夏" style="box-shadow: 0 0 8px rgba(0,0,0,0.1); max-width: 30%;"></p><p><a href="https://pan.baidu.com/s/1RCs0rhoIkI04FkTP2jMjcg?pwd=apqx">下载链接</a></p><h2 id="沉浸式阅读-花落知多少——《献给阿尔吉侬的花束》导读"><a href="#沉浸式阅读-花落知多少——《献给阿尔吉侬的花束》导读" class="headerlink" title="沉浸式阅读 花落知多少——《献给阿尔吉侬的花束》导读"></a>沉浸式阅读 花落知多少——《献给阿尔吉侬的花束》导读</h2><p>使用方正飞翔进行创作，正在参与2025年第13届全国大学生新媒体创意大赛</p><p>封面预览：</p><p align="center">  <img src="/img/封面设计1.png" alt="封面设计" style="box-shadow: 0 0 8px rgba(0,0,0,0.1); max-width: 30%;"></p><p><a href="https://h5.founderfx.cn/TQMS/resourceDir/20250522/3d13d4e6d9924884b2ffb28bf8d40003/index.html?param=Aa1bur_Dupo1i4&oldOpenid=&openid=oZAGH00T31qC-VTPyqDAZeMS6k40&shareSour=null">浏览链接</a></p><hr><h2 id="编曲"><a href="#编曲" class="headerlink" title="编曲"></a>编曲</h2><p>最后，您还可以听一下我的个人编曲作品，</p><p>它就在网页左下角的播放器中，点击即可播放。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      
        <title>新闻学概论（三）新闻学的主要内容</title>
      
      <link href="/2025/05/29/%E6%96%B0%E9%97%BB%E5%AD%A6%E6%A6%82%E8%AE%BA%EF%BC%88%E4%B8%89%EF%BC%89%E6%96%B0%E9%97%BB%E5%AD%A6%E7%9A%84%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9/"/>
      <url>/2025/05/29/%E6%96%B0%E9%97%BB%E5%AD%A6%E6%A6%82%E8%AE%BA%EF%BC%88%E4%B8%89%EF%BC%89%E6%96%B0%E9%97%BB%E5%AD%A6%E7%9A%84%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="新闻学概论（三）新闻学的主要内容"><a href="#新闻学概论（三）新闻学的主要内容" class="headerlink" title="新闻学概论（三）新闻学的主要内容"></a><strong>新闻学概论（三）新闻学的主要内容</strong></h1><p>案例:请阅读这几则新闻报道</p><blockquote><p><strong>习近平同俄罗斯总统普京共同会见记者</strong></p><p>新华社莫斯科5月8日电(记者郝薇薇、黄河)当地时间5月8日中午，国家主席习近平同俄罗斯总统普京在莫斯科克里姆林宫会谈后共同会见记者。</p><p>习近平指出，刚才，我同普京总统举行了深人友好、富有成果的会谈,达成许多新的重要共识。我们共同签署《中华人民共和国和俄罗斯联邦在纪念中国人民抗日战争、苏联伟大卫国战争胜利和联合国成立80周年之际关于进一步深化中俄新时代全面战略协作伙伴关系的联合声明》，见证两国有关部门交换多份合作文本，为中俄关系发展注入新的动能。</p><p>习近平强调，俄罗斯是我作为中华人民共和国主席到访最多的国家，这已经是第十一次来到俄罗斯。明天，我将出席纪念苏联伟大卫国战争胜利80周年庆典，这也将是我时隔10年再次出席这一盛大纪念活动。过去10年，是国际形势大动荡大变革的10年，也是中俄关系大发展大跨越的10年，我们共同见证了中俄两国政治互信不断巩固和深化，见证了两国各领域合作“芝麻开花节节高”。面对世界之变、时代之变、历史之变，中俄两国要牢牢把握双边关系前进方向和人类社会发展大势,挺膺担当，全面协作，为促进两国发展振兴、维护国际公平正义作出新的更大贡献。</p></blockquote><h2 id="一、新闻的要素"><a href="#一、新闻的要素" class="headerlink" title="一、新闻的要素"></a><strong>一、新闻的要素</strong></h2><p>新闻要素是构成新闻的必需材料，否则新闻就不是标准的新闻</p><p>新闻的六个要素 5W+1H</p><h2 id="二、新闻的类别"><a href="#二、新闻的类别" class="headerlink" title="二、新闻的类别"></a><strong>二、新闻的类别</strong></h2><ul><li>新闻内容：时政新闻、财经新闻、社会新闻、体育新闻</li><li>新闻发生地：国际新闻、国内新闻、地方新闻、社区新闻</li><li>新闻时效：突发性新闻、过程性新闻、周期性新闻</li><li>媒介形态：口语新闻、报纸新闻、广播新闻、电视新闻、网络新闻、融合新闻、智能新闻</li></ul><p>新闻的类别，有多种维度，不同的类别是有交叉的，分类主要是对传播者，为了便于新闻生产</p><p>互联网和数字媒介时代，分类已经模糊了，但是分类的价值依然存在</p><p>硬新闻（hard news）和软新闻（soft news），一般硬新闻优于软新闻</p><blockquote><p>硬新闻：更多关乎国计民生，人们切身利益，有严格的时效要求，报道越快越好</p><p>软新闻：引起人们兴趣，有人情味，为大众提供消遣，不强调时效性</p></blockquote><h2 id="三、新闻的本源与形态"><a href="#三、新闻的本源与形态" class="headerlink" title="三、新闻的本源与形态"></a><strong>三、新闻的本源与形态</strong></h2><h3 id="新闻的形态：历史形态"><a href="#新闻的形态：历史形态" class="headerlink" title="新闻的形态：历史形态"></a>新闻的形态：历史形态</h3><ol><li><p>混沌形态（与其他信息不分）：人类历史早期，没有明确的新闻意识；</p><p>新闻与历史信息、情报信息、生产生活信息混为一体</p></li><li><p>独立形态（与其他信息分离）：十分漫长的过程，人类根据不同的信息新闻的本源与形态需要，分门别类的新闻传播（例子：唐代奏折）；新闻信息、新闻业逐渐兴起</p></li><li><p>统一形态（与其他信息共存）：新闻信息与其他信息共存于同一媒介中，职业新闻传播规范兴起，新闻有明确的“标识”</p></li></ol><h3 id="新闻的形态：过程形态"><a href="#新闻的形态：过程形态" class="headerlink" title="新闻的形态：过程形态"></a>新闻的形态：过程形态</h3><ol><li><p>本源态（客观源头是什么）：</p><p>事实论：新闻是对客观存在的一定的事实的反映、再现</p><p>信息论：新闻的本源是信息，是对信息的反映</p><p><strong>事实论是根本的解释</strong></p></li><li><p>传播态（通常意义上的新闻）：</p><p>新闻文本：新闻是传播中的，以一定文本形式存在的</p><p>传播的形态的新闻是经过编码、符号化的精神产物</p><p><strong>受众直接面对的新闻</strong></p></li><li><p>收受态（接收、解读的新闻，读者理解中的新闻）：</p><p>新闻收受主体理解的产物，最终存在方式</p><p>收受态是一种自由的、个性的存在</p><p>通过媒介来理解新闻本源，涉及<strong>人们是否愿意相信的问题</strong></p></li></ol><h3 id="新闻的本源：事实及其变动"><a href="#新闻的本源：事实及其变动" class="headerlink" title="新闻的本源：事实及其变动"></a>新闻的本源：事实及其变动</h3><p>新闻的本源是<strong>事实及其变动</strong>：</p><ol><li><strong>先有事实，后有新闻</strong></li><li><strong>事实是第一性，新闻是第二性</strong></li></ol><p>此观点从未变化，一旦否定此观点，新闻就沦为假新闻</p><p>此外：所有事实都需要，都值得报道吗？当然不是，需要尊重新闻三要素</p><p>新闻的本源：客观事实的最新变动，变动越是剧烈，就越可能成为“大新闻”</p>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 新闻学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>纪实摄影5.29 新闻摄影创作</title>
      
      <link href="/2025/05/29/%E7%BA%AA%E5%AE%9E%E6%91%84%E5%BD%B15.29%20%E6%96%B0%E9%97%BB%E6%91%84%E5%BD%B1%E5%88%9B%E4%BD%9C/"/>
      <url>/2025/05/29/%E7%BA%AA%E5%AE%9E%E6%91%84%E5%BD%B15.29%20%E6%96%B0%E9%97%BB%E6%91%84%E5%BD%B1%E5%88%9B%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="纪实摄影5-29：新闻摄影创作"><a href="#纪实摄影5-29：新闻摄影创作" class="headerlink" title="纪实摄影5.29：新闻摄影创作"></a><strong>纪实摄影</strong>5.29：新闻摄影创作</h1><hr><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><a href="https://bkimg.cdn.bcebos.com/pic/eaf81a4c510fd9f9d72ab4224474c32a2834349b0e7c?x-bce-process=image/format,f_auto/quality,Q_70/resize,m_lfit,limit_1,w_536">特朗普枪击照片</a> By美联社记者 埃文·瓦奇</p><p>“照片改变历史”？</p><p>照片背后：摄影师佩戴Gopro记录，当枪击事件发生时，他的位置并不是很好，但是他凭借职业意识捕捉到了这张照片</p><p><strong>但是</strong> 获得何赛的照片并不是这张相当具有政治意味的照片，得奖的是<a href="https://pics0.baidu.com/feed/b3b7d0a20cf431ad41bfd4fad6c505a02cdd9883.jpeg@f_auto?token=c5a1df944e2966b08bb198755463f268">这张</a></p><p>它获奖意味着<strong>新闻摄影</strong>（<em>与纪实摄影不完全相同</em>）并不是仅仅的<strong>去吸引眼球和具有内涵性或讽刺性</strong>，更重要的是照片所传达出来的那种<strong>真实性</strong></p><hr><h2 id="校园案例"><a href="#校园案例" class="headerlink" title="校园案例"></a>校园案例</h2><p>“糖葫芦商贩进校园” 需要指出的问题是 这个照片有新闻价值吗？</p><p>新闻摄影三问：</p><ul><li>这个场景有<strong>新闻价值</strong>吗</li><li>这个画面能<strong>出色</strong>地表现这一新闻价值吗</li><li>这个瞬间是<strong>最直观、最形象、最具冲击力</strong>的画面吗</li></ul><hr><h2 id="新闻摄影的定义"><a href="#新闻摄影的定义" class="headerlink" title="新闻摄影的定义"></a>新闻摄影的定义</h2><p>新闻摄影就是用新闻手段记录正在发生的新闻事实，（或与该新闻相关联的事实）结合具有新闻信息的事实</p><p>需要有文字进行”一半一半“的描述</p><hr><h2 id="如何进行新闻摄影"><a href="#如何进行新闻摄影" class="headerlink" title="如何进行新闻摄影"></a>如何进行新闻摄影</h2><ul><li>抓取特定的典型瞬间（信息传播的信息传达度）</li></ul><h2 id="新闻摄影失实的概念"><a href="#新闻摄影失实的概念" class="headerlink" title="新闻摄影失实的概念"></a>新闻摄影失实的概念</h2><p>指的是新闻摄影报道所呈现的画面与客观实际情况不符合，未能真实准确地反映客观事物的本质面貌</p><p>如“虚假摆拍”、“移花接木”、“张冠李戴”等</p><p>新闻摄影失实的原因：</p><ul><li>瞬间性：图片捕捉的是孤立的事实，展现给我们的是一个没有背景的生活片段</li><li>多义性：摄影是通过图像的符号来传递信息和表达意义</li><li>物质性：摄影是基于物质作用和变化下的图像艺术，而改变发生在物质的改变：Ps、扩印</li></ul><p>案例：非典新人照片摆拍、立夏将至农事忙（摆拍明显）、印度总理莫迪坐在飞机上“视察灾区”（后期加工）、广场鸽注射禽流感疫苗（后期加工）、抗洪小战士睡着（二次传播失实）、俄乌冲突孩子（图对文不对）</p><p>注意 事实搜索、反向搜索</p><p><strong>关于摆拍准则</strong></p><p>不要去摆拍（干涉）正在发生的新闻事件</p><p>摆拍不是要摆拍一个假场景，不是要摆出一张假照片。是要创造出一张具有视觉冲击力但是不会让读者误读的照片</p><p>谨慎对待图片说明。因为许多假照片是文字写出来的（二次传播等）</p><blockquote><p>图片书写规范</p><ol><li>五个W</li><li>倒金字塔：先提炼主要事实，然后是次要信息和背景信息</li><li>使用准确语言，切记模糊</li><li>不要写照片中显而易见的，要写照片中不可见的</li><li>用事实说话，不要主观臆断，慎用形容词</li></ol></blockquote><p>范例：2003年12月25日，巴基斯坦警察正在拉瓦尔品第针对穆沙拉夫总统的爆炸事件现场警戒。在一天时间内，巴基斯坦发生了两起爆炸事件，造成了三十多人伤亡，但穆沙拉夫安然无恙。</p><p>对于同一个地震中的手掌印</p><p>有两个实例：</p><p>2005年6月14日，黑龙江宁安市沙兰镇中心小学的教室里，洪水侵袭的痕迹和现场的手印触目惊心。10日下午14时许，牡丹江地区宁安市沙兰镇突发山洪，截止6月21日，沙兰镇洪灾死亡人数最终确定为117人，其中学生105人。</p><p>昨日中午11时许，在沙兰中心小学，一位武警官兵在淤泥中抬起头来说“去看看教室墙壁上孩子们的小手印吧，他们在洪水中留下的印记。”随后，记者在一个教室中见到原本洁白的墙上被一道清晰的水渍分开，四个乌黑的掌印被留在了水线下半米处。而在这一排8个教室里，有5个教室墙壁多处留下了或深或浅，或高或低的掌印。</p><hr><h2 id="新闻摄影分类"><a href="#新闻摄影分类" class="headerlink" title="新闻摄影分类"></a>新闻摄影分类</h2><ul><li><p>突发新闻</p><p>可能无法触及现场，但是可以回到新闻现场，触及第二现场</p></li><li><p>一般新闻</p><p>指事先知道这件事件发生的时间、地点、人物等</p><p>一般新闻要想想如何拍到反映新闻摄影的具有冲击力的照片（广院之春、俞敏洪准备演讲</p></li><li><p>新闻特写</p><p>新闻特写并非镜头景别运用中的特写，而是关注生活中的议题、现象和趋势一种摄影报道形式。摄影记者以发展和变化的眼光审视眼前的常态生活，看到其中的意味。（补习班、香蕉）</p></li></ul><p><strong>切记：一图胜千言·求真</strong></p>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 新闻学 </tag>
            
            <tag> 纪实摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Python入门基础（四）推导式、迭代器与生成器</title>
      
      <link href="/2025/05/18/Python%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E6%8E%A8%E5%AF%BC%E5%BC%8F%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2025/05/18/Python%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E6%8E%A8%E5%AF%BC%E5%BC%8F%E3%80%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python入门基础（四）推导式、迭代器与生成器"><a href="#Python入门基础（四）推导式、迭代器与生成器" class="headerlink" title="Python入门基础（四）推导式、迭代器与生成器"></a>Python入门基础（四）推导式、迭代器与生成器</h1><hr><h2 id="一、推导式"><a href="#一、推导式" class="headerlink" title="一、推导式"></a>一、推导式</h2><p>Python 推导式是一种独特的数据处理方式，可以从一个数据序列构建另一个新的数据序列的结构体。</p><p>推导式（Comprehension）是 Python 的一种<strong>简洁、高效</strong>的语法结构，用于<strong>快速生成列表（List）、字典（Dict）、集合（Set）甚至生成器（Generator或称元组Tuple）</strong>。它的核心思想是：</p><blockquote><p><strong>用一行代码完成循环 + 条件判断 + 数据转换，生成一个新的数据结构。</strong></p></blockquote><h3 id="推导式格式"><a href="#推导式格式" class="headerlink" title="推导式格式"></a>推导式格式</h3><p>所有推导式的<strong>通用结构</strong>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象 <span class="keyword">if</span> 条件 ]</span><br></pre></td></tr></table></figure><ul><li><strong>表达式</strong>：对变量进行处理（如 <code>x * 2</code>）。</li><li><strong>for 变量 in 可迭代对象</strong>：遍历数据源（如 <code>for x in range(10)</code>）。</li><li><strong>if 条件（可选）</strong>：过滤数据（如 <code>if x % 2 == 0</code>）。</li></ul><table><thead><tr><th>推导式类型</th><th>语法示例</th><th>用途</th></tr></thead><tbody><tr><td><strong>列表推导式（List Comprehension）</strong></td><td><code>[x for x in range(10)]</code></td><td>生成列表</td></tr><tr><td><strong>字典推导式（Dict Comprehension）</strong></td><td><code>&#123;k: v for k, v in zip(keys, values)&#125;</code></td><td>生成字典</td></tr><tr><td><strong>集合推导式（Set Comprehension）</strong></td><td><code>&#123;x for x in range(10)&#125;</code></td><td>生成集合</td></tr><tr><td><strong>生成器&#x2F;元组推导式（Generator Expression）</strong></td><td><code>(x for x in range(10))</code></td><td>生成生成器（惰性计算，节省内存）</td></tr></tbody></table><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>列表推导式格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表]</span><br><span class="line">[out_exp_res <span class="keyword">for</span> out_exp <span class="keyword">in</span> input_list]</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">[表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表 <span class="keyword">if</span> 条件]</span><br><span class="line">[out_exp_res <span class="keyword">for</span> out_exp <span class="keyword">in</span> input_list <span class="keyword">if</span> condition]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>out_exp_res：列表生成元素表达式，可以是有返回值的函数。</li><li>for out_exp in input_list：迭代 input_list 将 out_exp 传入到 out_exp_res 表达式中。</li><li>if condition：条件语句，可以过滤列表中不符合条件的值。</li></ul><p>过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;Wendy&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_names = [name.upper()<span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(new_names)</span><br><span class="line">[<span class="string">&#x27;ALICE&#x27;</span>, <span class="string">&#x27;JERRY&#x27;</span>, <span class="string">&#x27;WENDY&#x27;</span>, <span class="string">&#x27;SMITH&#x27;</span>]</span><br></pre></td></tr></table></figure><p>计算 30 以内可以被 3 整除的整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>multiples = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(multiples)</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><p>字典推导基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; key_expr: value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection &#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">&#123; key_expr: value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection <span class="keyword">if</span> condition &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用字符串及其长度创建字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listdemo = [<span class="string">&#x27;Google&#x27;</span>,<span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="comment"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newdict = &#123;key:<span class="built_in">len</span>(key) <span class="keyword">for</span> key <span class="keyword">in</span> listdemo&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newdict</span><br><span class="line">&#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h3><p>集合推导式基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> &#125;</span><br><span class="line">或</span><br><span class="line">&#123; expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> <span class="keyword">if</span> conditional &#125;</span><br></pre></td></tr></table></figure><p>计算数字 1,2,3 的平方数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setnew = &#123;i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setnew</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><p>判断不是 abc 的字母并输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="生成器推导式（元组推导式）"><a href="#生成器推导式（元组推导式）" class="headerlink" title="生成器推导式（元组推导式）"></a>生成器推导式（元组推导式）</h3><p>元组推导式可以利用 range 区间、元组、列表、字典和集合等数据类型，快速生成一个满足指定需求的元组。</p><p>元组推导式基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> )</span><br><span class="line">或</span><br><span class="line">(expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> <span class="keyword">if</span> conditional )</span><br></pre></td></tr></table></figure><p>元组推导式和列表推导式的用法也完全相同，只是元组推导式是用 () 圆括号将各部分括起来，而列表推导式用的是中括号 []，另外元组推导式返回的结果是一个生成器对象。</p><p>例如，我们可以使用下面的代码生成一个包含数字 1~9 的元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7faf6ee20a50</span>&gt;  <span class="comment"># 返回的是生成器对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(a)       <span class="comment"># 使用 tuple() 函数，可以直接将生成器对象转换成元组</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="二、迭代器"><a href="#二、迭代器" class="headerlink" title="二、迭代器"></a>二、迭代器</h2><p>迭代是Python最强大的功能之一，是访问集合元素的一种方式。</p><p>迭代器是一个可以记住的内容的对象。</p><p>迭代器 Python 中用于<strong>遍历数据集合</strong>的一种机制，它的核心特点是：</p><blockquote><p><strong>惰性访问（Lazy Access）</strong>：数据按需获取，不一次性加载全部内容，节省内存。</p></blockquote><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完成结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：<strong>iter()和next()</strong>。</p><p>字符串，列表或元组对象都可用于创建迭代器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span> = [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span> ]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = <span class="built_in">iter</span> ( <span class="built_in">list</span> )    <span class="comment">#创建迭代器对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> ( <span class="built_in">next</span> ( it ) )   <span class="comment"># 输出迭代器的下一个元素</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> ( <span class="built_in">next</span> ( it ) )</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>迭代器对象可以使用常规for语句进行遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span> (x, end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以使用 next() 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys         <span class="comment"># 引入 sys 模块</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">next</span>(it))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><hr><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>在 Python 中，使用了 <strong>yield</strong> 的函数被称为生成器（generator）。</p><p>它和迭代器关系密切，但功能更灵活、性能更好，非常适合处理 <strong>大数据流、懒加载、协程</strong> 等场景。</p><p><strong>yield</strong> 是一个关键字，用于定义生成器函数，生成器函数是一种特殊的函数，可以在迭代过程中逐步产生值，而不是一次性返回所有结果。</p><p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p><p>当在生成器函数中使用 <strong>yield</strong> 语句时，函数的执行将会暂停，并将 <strong>yield</strong> 后面的表达式作为当前迭代的值返回。（与return类似）</p><p>然后，每次调用生成器的 <strong>next()</strong> 方法或使用 <strong>for</strong> 循环进行迭代时，函数会从上次暂停的地方继续执行，直到再次遇到 <strong>yield</strong> 语句。这样，生成器函数可以逐步产生值，而不需要一次性计算并返回所有结果。</p><p>调用一个生成器函数，返回的是一个迭代器对象。</p><p>下面是一个简单的示例，展示了生成器函数的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">countdown</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建生成器对象</span></span><br><span class="line">generator = countdown(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 通过迭代生成器获取值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))  <span class="comment"># 输出: 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))  <span class="comment"># 输出: 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))  <span class="comment"># 输出: 3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 for 循环迭代生成器</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> generator:</span><br><span class="line">    <span class="built_in">print</span>(value)  <span class="comment"># 输出: 2 1</span></span><br></pre></td></tr></table></figure><p>以上实例中，<strong>countdown</strong> 函数是一个生成器函数。它使用 yield 语句逐步产生从 n 到 1 的倒数数字。在每次调用 yield 语句时，函数会返回当前的倒数值，并在下一次调用时从上次暂停的地方继续执行。</p><p>通过创建生成器对象并使用 next() 函数或 for 循环迭代生成器，我们可以逐步获取生成器函数产生的值。在这个例子中，我们首先使用 next() 函数获取前三个倒数值，然后通过 for 循环获取剩下的两个倒数值。</p><p>生成器函数的优势是它们可以按需生成值，避免一次性生成大量数据并占用大量内存。此外，生成器还可以与其他迭代工具（如for循环）无缝配合使用，提供简洁和高效的迭代方式。</p><p>以下实例使用 yield 实现斐波那契数列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>): <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n): </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">f = fibonacci(<span class="number">10</span>) <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">next</span>(f), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><p>执行以上程序，输出结果如下：</p><p><code>0 1 1 2 3 5 8 13 21 34 55</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Python基础入门（三）运算符、条件控制与循环语句</title>
      
      <link href="/2025/05/17/Python%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2025/05/17/Python%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python入门基础（三）运算符、条件控制与循环语句"><a href="#Python入门基础（三）运算符、条件控制与循环语句" class="headerlink" title="Python入门基础（三）运算符、条件控制与循环语句"></a>Python入门基础（三）运算符、条件控制与循环语句</h1><hr><h2 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a>一、运算符</h2><h3 id="什么是运算符"><a href="#什么是运算符" class="headerlink" title="什么是运算符"></a>什么是运算符</h3><p>举个简单的例子:</p><p><code>4 + 5 = 9</code></p><p>例子中，<code>4</code> 和 <code>5</code> 被称为<strong>操作数</strong>，<code>+</code> 称为<strong>运算符</strong>。</p><p>Python 语言支持以下类型的运算符:</p><ul><li>算术运算符</li><li>比较（关系）运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li><li>运算符优先级</li></ul><p>接下来让我们一个个来学习Python的运算符。</p><hr><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>以下假设变量 a&#x3D;10，变量 b&#x3D;21：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加 - 两个对象相加</td><td>a + b 输出结果 31</td></tr><tr><td>-</td><td>减 - 得到负数或是一个数减去另一个数</td><td>a - b 输出结果 -11</td></tr><tr><td>*</td><td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td>a * b 输出结果 210</td></tr><tr><td>&#x2F;</td><td>除 - x 除以 y</td><td>b &#x2F; a 输出结果 2.1</td></tr><tr><td>%</td><td>取模 - 返回除法的余数</td><td>b % a 输出结果 1</td></tr><tr><td>**</td><td>幂 - 返回x的y次幂</td><td>a**b 为10的21次方</td></tr><tr><td>&#x2F;&#x2F;</td><td>取整除 - 往小的方向取整数</td><td>b &#x2F;&#x2F; a 输出结果为2</td></tr></tbody></table><hr><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>以下假设变量 a 为 10，变量 b 为20：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于 - 比较对象是否相等</td><td>(a &#x3D;&#x3D; b) 返回 False。</td></tr><tr><td>!&#x3D;</td><td>不等于 - 比较两个对象是否不相等</td><td>(a !&#x3D; b) 返回 True。</td></tr><tr><td>&gt;</td><td>大于 - 返回x是否大于y</td><td>(a &gt; b) 返回 False。</td></tr><tr><td>&lt;</td><td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td>(a &lt; b) 返回 True。</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于 - 返回x是否大于等于y。</td><td>(a &gt;&#x3D; b) 返回 False。</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于 - 返回x是否小于等于y。</td><td>(a &lt;&#x3D; b) 返回 True。</td></tr></tbody></table><hr><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值运算符</td><td>c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取模赋值运算符</td><td>c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c **&#x3D; a 等效于 c &#x3D; c ** a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>取整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>:&#x3D;</td><td>海象运算符，也叫赋值表达式，这个运算符的主要目的是在表达式中同时进行赋值和返回赋值的值。<strong>Python3.8 版本新增运算符</strong>。</td><td><strong>在表达式中进行赋值操作</strong>，也就是说，它可以在一边判断的同时一边赋值，而不需要写两行代码</td></tr></tbody></table><p>附海象运算符案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统代码</span></span><br><span class="line">n = <span class="built_in">len</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">3</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;字符串的长度是<span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 优化代码</span></span><br><span class="line"><span class="keyword">if</span> (n := <span class="built_in">len</span>(<span class="string">&quot;hello&quot;</span>)) &gt; <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;字符串长度是 <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td>(a and b) 返回 20。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td>(a or b) 返回 10。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(a and b) 返回 False</td></tr></tbody></table><p>同行读取优先级：not &gt; and &gt; or</p><hr><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td>|</td><td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1</td><td>(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td>^</td><td>按位异或运算符：当两对应的二进位相异时，结果为1</td><td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td>~</td><td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1</td><td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，<strong>高位丢弃，低位补0</strong></td><td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数,</td><td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><p>注意：位运算符优先级虽<strong>高于</strong>比较运算符，但在其他语言中（如C语言）低于比较运算符，因此建议在编写代码中加括号</p><p>如<code>if x &amp; 1 == 0</code> 应该优化成 <code>if (x &amp; 1) == 0</code></p><hr><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td><td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True</td></tr></tbody></table><hr><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用自一个对象</td><td><strong>x is y</strong>, 类似 <strong>id(x) &#x3D;&#x3D; id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用自不同对象</td><td><strong>x is not y</strong> ， 类似 <strong>id(x) !&#x3D; id(y)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p>**注：**id() 函数用于获取对象内存地址。</p><hr><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>以下表格列出了从最高到最低优先级的所有运算符， 相同单元格内的运算符具有相同优先级。 运算符均指二元运算，除非特别指出。 相同单元格内的运算符从左至右分组（除了幂运算是从右至左分组）：</p><table><thead><tr><th>优先级</th><th>运算符类型</th><th>运算符符号</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>括号</td><td><code>()</code></td><td><code>(a + b)</code></td><td>最高优先级，强制改变运算顺序</td></tr><tr><td>2</td><td>索引&#x2F;切片&#x2F;属性访问</td><td><code>[]</code> <code>[:]</code> <code>.</code></td><td><code>lst[0]</code> <code>obj.attr</code></td><td>用于容器访问和对象属性</td></tr><tr><td>3</td><td>函数调用&#x2F;容器字面量</td><td><code>()</code> <code>&#123;&#125;</code> <code>[]</code></td><td><code>func()</code> <code>&#123;1, 2&#125;</code></td><td>函数调用和集合&#x2F;字典&#x2F;列表的创建</td></tr><tr><td>4</td><td>幂运算</td><td><code>**</code></td><td><code>2 ** 3</code></td><td>右结合（<code>2**3**2</code> → <code>2**(3**2)</code>）</td></tr><tr><td>5</td><td>按位取反&#x2F;算术取反</td><td><code>+x</code> <code>-x</code> <code>~x</code></td><td><code>-5</code> <code>~0b101</code></td><td>一元运算符</td></tr><tr><td>6</td><td>乘&#x2F;除&#x2F;取模&#x2F;地板除</td><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td><code>5 // 3</code> <code>9 % 2</code></td><td></td></tr><tr><td>7</td><td>加&#x2F;减</td><td><code>+</code> <code>-</code></td><td><code>3 + 5</code></td><td></td></tr><tr><td>8</td><td>位移运算</td><td><code>&lt;&lt;</code> <code>&gt;&gt;</code></td><td><code>1 &lt;&lt; 3</code></td><td></td></tr><tr><td>9</td><td>按位与</td><td><code>&amp;</code></td><td><code>0b101 &amp; 0b110</code></td><td></td></tr><tr><td>10</td><td>按位异或</td><td><code>^</code></td><td><code>0b101 ^ 0b110</code></td><td></td></tr><tr><td>11</td><td>按位或</td><td><code>|</code></td><td><code>0b101 | 0b110</code></td><td></td></tr><tr><td>12</td><td>比较运算</td><td><code>==</code> <code>!=</code> <code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code> <code>is</code> <code>in</code></td><td><code>x == y</code> <code>&#39;a&#39; in lst</code></td><td>链式比较会被特殊处理（如 <code>1 &lt; x &lt; 5</code>）</td></tr><tr><td>13</td><td>布尔非</td><td><code>not</code></td><td><code>not True</code></td><td>一元运算符</td></tr><tr><td>14</td><td>布尔与</td><td><code>and</code></td><td><code>x &gt; 0 and x &lt; 10</code></td><td>短路逻辑（若左边为False则不计算右边）</td></tr><tr><td>15</td><td>布尔或</td><td><code>or</code></td><td><code>x == 0 or x == 1</code></td><td>短路逻辑（若左边为True则不计算右边）</td></tr><tr><td>16</td><td>三元条件运算符</td><td><code>if</code> <code>else</code></td><td><code>x if cond else y</code></td><td></td></tr><tr><td>17</td><td>赋值运算符</td><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> 等</td><td><code>x += 1</code></td><td>最低优先级</td></tr></tbody></table><hr><h2 id="二、条件控制"><a href="#二、条件控制" class="headerlink" title="二、条件控制"></a>二、条件控制</h2><p>Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。</p><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p>Python中if语句的一般形式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure><ul><li>如果 “condition_1” 为 True 将执行 “statement_block_1” 块语句</li><li>如果 “condition_1” 为False，将判断 “condition_2”</li><li>如果”condition_2” 为 True 将执行 “statement_block_2” 块语句</li><li>如果 “condition_2” 为False，将执行”statement_block_3”块语句</li></ul><p>Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>。</p><p><strong>注意：</strong></p><ul><li><p>1、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。</p></li><li><p>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</p></li><li><p>3、在 Python 中没有 <code>switch...case</code> 语句，但在 Python3.10 版本添加了 <code>match...case</code>，功能类似，<code>case _</code>类似于 C 和 Java 中的 <code>default</code>:，当其他 <code>case</code> 都无法匹配时，匹配这条，保证永远会匹配成功。：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_color</span>(<span class="params">color</span>):</span><br><span class="line">    <span class="keyword">match</span> color:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;red&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你选择了红色&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;blue&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你选择了蓝色&quot;</span>)e</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;green&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你选择了绿色&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未知颜色&quot;</span>)<span class="comment">#_符号可以看作是一个通配符，功能类似else，若上述条件未符合，将执行该行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h3><p>在嵌套 if 语句中，可以把 if…elif…else 结构放在另外一个 if…elif…else 结构中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">    语句</span><br><span class="line">    <span class="keyword">if</span> 表达式<span class="number">2</span>:</span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">elif</span> 表达式<span class="number">3</span>:</span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        语句</span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">4</span>:</span><br><span class="line">    语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><hr><h2 id="三、循环语句"><a href="#三、循环语句" class="headerlink" title="三、循环语句"></a>三、循环语句</h2><p>Python 中的循环语句有 for 和 while。</p><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>Python 中 while 语句的一般形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure><p>同样需要注意冒号和缩进。另外，在 Python 中没有 do..while 循环。</p><p>以下实例使用了 while 来计算 1 到 100 的总和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 到 %d 之和为: %d&quot;</span> % (n,<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><hr><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><p>我们可以通过设置条件表达式永远不为 false 来实现无限循环，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> var == <span class="number">1</span> :  <span class="comment"># 表达式永远为 true</span></span><br><span class="line">   num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个数字  :&quot;</span>))</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;你输入的数字是: &quot;</span>, num)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Good bye!&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行以上脚本，输出结果如下：</p><p><code>输入一个数字  :5   你输入的数字是:  5   输入一个数字  :</code></p><p>你可以使用 <strong>CTRL+C</strong> 来退出当前的无限循环。</p><p>无限循环在服务器上客户端的实时请求非常有用。</p><hr><h3 id="while-循环使用-else-语句"><a href="#while-循环使用-else-语句" class="headerlink" title="while 循环使用 else 语句"></a>while 循环使用 else 语句</h3><p>如果 while 后面的条件语句为 false 时，则执行 else 的语句块。</p><p>语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;expr&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;additional_statement(s)&gt;</span><br></pre></td></tr></table></figure><p><code>expr</code> 条件语句为 <code>true</code> 则执行 <code>statement(s)</code> 语句块，如果为 <code>false</code>，则执行 <code>additional_statement(s)</code>。</p><p>循环输出数字，并判断大小，实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="built_in">print</span> (count, <span class="string">&quot; 小于 5&quot;</span>)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (count, <span class="string">&quot; 大于或等于 5&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="简单语句组"><a href="#简单语句组" class="headerlink" title="简单语句组"></a>简单语句组</h3><p>类似 if 语句的语法，如果你的 while 循环体中只有一条语句，你可以将该语句与 while 写在同一行中， 如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (flag): <span class="built_in">print</span> (<span class="string">&#x27;欢迎访问菜鸟教程!&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Good bye!&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>Python for 循环可以遍历任何<strong>可迭代对象</strong>，如一个列表（容器）或者一个字符串。</p><p>for循环的一般格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><p>Python for 循环实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>,<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;Taobao&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">    <span class="built_in">print</span>(site)</span><br></pre></td></tr></table></figure><p>也可用于打印字符串中的每个字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&#x27;runoob&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">    <span class="built_in">print</span>(letter)</span><br></pre></td></tr></table></figure><p>整数范围值可以配合 range() 函数使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure><hr><h3 id="for…else-语句"><a href="#for…else-语句" class="headerlink" title="for…else 语句"></a>for…else 语句</h3><p>在 Python 中，for…else 语句用于在循环结束后执行一段代码。</p><p>语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">    <span class="comment"># 循环主体</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 循环结束后执行的代码</span></span><br></pre></td></tr></table></figure><p>执行脚本后，输出结果为：</p><p><code>0   1   2   3   4   5   Finally finished!</code></p><p>以下 for 实例中使用了 break 语句，break 语句用于跳出当前循环体，不会执行 else 子句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>,<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;Taobao&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">    <span class="keyword">if</span> site == <span class="string">&quot;Runoob&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;菜鸟&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环数据 &quot;</span> + site)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有循环数据!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;完成循环!&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行脚本后，在循环到 “Runoob”时会跳出循环体：</p><p><code>循环数据 Baidu   循环数据 Google   菜鸟   完成循环!</code></p><hr><h3 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h3><p>如果你需要遍历数字序列，可以使用内置 range() 函数。它会生成数列，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>也可以使 range() 以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做’步长’):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>可以结合 range() 和 len() 函数以遍历一个序列的索引,如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, a[i])</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span> Google</span><br><span class="line"><span class="number">1</span> Baidu</span><br><span class="line"><span class="number">2</span> Runoob</span><br><span class="line"><span class="number">3</span> Taobao</span><br><span class="line"><span class="number">4</span> QQ</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>还可以使用 range() 函数来创建一个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="break-和-continue-语句及循环中的-else-子句"><a href="#break-和-continue-语句及循环中的-else-子句" class="headerlink" title="break 和 continue 语句及循环中的 else 子句"></a>break 和 continue 语句及循环中的 else 子句</h3><p><strong>break</strong> 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p><p><strong>continue</strong> 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><p>while 中使用 break：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>while 中使用 continue：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;循环结束。&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure><p>循环语句可以有 <strong>else</strong> 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。</p><p>如下实例用于查询质数的循环例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(n, <span class="string">&#x27;等于&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n//x)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 循环中没有找到元素</span></span><br><span class="line">        <span class="built_in">print</span>(n, <span class="string">&#x27; 是质数&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">2</span>  是质数</span><br><span class="line"><span class="number">3</span>  是质数</span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2</span></span><br><span class="line"><span class="number">5</span>  是质数</span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3</span></span><br><span class="line"><span class="number">7</span>  是质数</span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h3 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h3><p>Python pass是空语句，是为了保持程序结构的完整性。</p><p>pass 不做任何事情，一般用做占位语句，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span>  <span class="comment"># 等待键盘中断 (Ctrl+C)</span></span><br></pre></td></tr></table></figure><p>以下实例在字母为 o 时 执行 pass 语句块:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&#x27;Runoob&#x27;</span>: </span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">      <span class="built_in">print</span> (<span class="string">&#x27;执行 pass 块&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&#x27;当前字母 :&#x27;</span>, letter)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Good bye!&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>预告片剪辑结构</title>
      
      <link href="/2025/05/14/%E9%A2%84%E5%91%8A%E7%89%87%E5%89%AA%E8%BE%91/"/>
      <url>/2025/05/14/%E9%A2%84%E5%91%8A%E7%89%87%E5%89%AA%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="预告片剪辑结构"><a href="#预告片剪辑结构" class="headerlink" title="预告片剪辑结构"></a>预告片剪辑结构</h1><hr><h2 id="一、整体结构"><a href="#一、整体结构" class="headerlink" title="一、整体结构"></a>一、整体结构</h2><p>就目前而言，预告片在商业化后出现了明显的套路化，而我们就来学习这种套路化</p><img src="/img/三幕结构.png" alt="三幕结构" style="border: 1px solid #eee;"><p>如图，预告片最明显的特征是<strong>三幕式</strong>，只不过在近年来为了适应观众刺激阈值升高，而在首尾添加了**“冷开场”和“彩蛋”**环节，但三幕式一直存在。</p><p>三幕式，顾名思义，就是通过三个段落来进行电影的“营销”、吊胃口。</p><p>三幕的功能分别是：<strong>建置</strong>，明确故事背景；<strong>冲突</strong>，对抗出现；<strong>再冲突</strong>，达到高潮。</p><hr><h2 id="二、冷开场"><a href="#二、冷开场" class="headerlink" title="二、冷开场"></a>二、冷开场</h2><p>作为出现在观众视野里的第一组镜头，冷开场的作用是<strong>直接吸引观众的注意力</strong>，一个常用的方式是简单粗暴地放一组动作场面</p><p>案例链接：<a href="https://www.bilibili.com/video/BV1Dx41127uC/?spm_id_from=333.337.search-card.all.click&vd_source=5c9a6ef08adcfa12cb8a1ad0f740b8fa">《疾速追杀 &#x2F; John Wick》1080P预告片</a></p>]]></content>
      
      
      <categories>
          
          <category> 剪辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 编辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Python基础入门（二）基本数据类型与转换</title>
      
      <link href="/2025/05/12/Python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BD%AC%E6%8D%A2/"/>
      <url>/2025/05/12/Python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python基础入门（二）基本数据类型与转换"><a href="#Python基础入门（二）基本数据类型与转换" class="headerlink" title="Python基础入门（二）基本数据类型与转换"></a><strong>Python基础入门（二）基本数据类型与转换</strong></h1><hr><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是<strong>变量</strong><em>所指</em>的<strong>内存</strong>中<strong>对象的类型</strong>。</p><h2 id="一、变量赋值"><a href="#一、变量赋值" class="headerlink" title="一、变量赋值"></a>一、变量赋值</h2><p>等号<code>=</code>用来给变量赋值。</p><p>等号<code>=</code>运算符左边是一个变量名,等号<code>=</code>运算符右边是存储在变量中的值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">&quot;xiaoming&quot;</span>     <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (counter)</span><br><span class="line"><span class="built_in">print</span> (miles)</span><br><span class="line"><span class="built_in">print</span> (name)</span><br></pre></td></tr></table></figure><p>执行以上程序会输出如下结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1000.0</span></span><br><span class="line">xiaoming</span><br></pre></td></tr></table></figure><h2 id="二、多个变量赋值"><a href="#二、多个变量赋值" class="headerlink" title="二、多个变量赋值"></a>二、多个变量赋值</h2><p>Python允许你同时为多个变量赋值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p><p>您也可以为多个对象指定多个变量。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;runoob&quot;</span></span><br></pre></td></tr></table></figure><p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “runoob” 分配给变量 c。</p><p>可以通过 type() 函数查看变量的类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变量定义</span></span><br><span class="line">x = <span class="number">10</span>          <span class="comment"># 整数</span></span><br><span class="line">y = <span class="number">3.14</span>         <span class="comment"># 浮点数</span></span><br><span class="line">name = <span class="string">&quot;Alice&quot;</span>   <span class="comment"># 字符串</span></span><br><span class="line">is_active = <span class="literal">True</span> <span class="comment"># 布尔值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多变量赋值</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;three&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))        <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))        <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))     <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(is_active)) <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、标准数据类型"><a href="#三、标准数据类型" class="headerlink" title="三、标准数据类型"></a>三、标准数据类型</h2><p>Python3 中常见的数据类型有：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>bool（布尔类型）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）</li><li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）</li></ul><p>此外还有一些高级的数据类型，如: 字节数组类型(bytes)。</p><hr><h2 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h2><p>Python3 支持 <strong>int、float、bool、complex（复数）</strong>。</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p><p>内置的 type() 函数可以用来查询变量所指的对象类型。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="literal">True</span>, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">type</span>(a), <span class="built_in">type</span>(b), <span class="built_in">type</span>(c), <span class="built_in">type</span>(d))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;bool&#x27;</span>&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;complex&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>此外还可以用 isinstance 来判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">111</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a, <span class="built_in">int</span>)  </span><br><span class="line"><span class="literal">True</span>  </span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>isinstance 和 type 的区别在于：</p><ul><li>type()不会认为子类是一种父类类型</li><li>isinstance()会认为子类是一种父类类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(A(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(A()) == A </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(B(), A)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(B()) == A</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>当你指定一个值时，Number 对象就会被创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>您也可以使用del语句删除一些对象引用。</p><p>del 语句的语法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> var1[, var2[, var3[...., varN]]]</span><br></pre></td></tr></table></figure><p>您可以通过使用 del 语句删除单个或多个对象。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> var</span><br><span class="line"><span class="keyword">del</span> var_a, var_b</span><br></pre></td></tr></table></figure><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> + <span class="number">4</span>  <span class="comment"># 加法</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4.3</span> - <span class="number">2</span> <span class="comment"># 减法</span></span><br><span class="line"><span class="number">2.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">7</span>  <span class="comment"># 乘法</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> / <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> // <span class="number">4</span> <span class="comment"># 除法，得到一个整数</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">17</span> % <span class="number">3</span> <span class="comment"># 取余 </span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">5</span> <span class="comment"># 乘方</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>1、Python可以同时为多个变量赋值，如a, b &#x3D; 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法包含两个运算符：&#x2F; 返回一个浮点数，&#x2F;&#x2F; 返回一个整数。</li><li>4、在混合计算时，Python会把整型转换成为浮点数。</li></ul><hr><h3 id="数值类型实例"><a href="#数值类型实例" class="headerlink" title="数值类型实例"></a>数值类型实例</h3><table><thead><tr><th>int</th><th>float</th><th>complex</th></tr></thead><tbody><tr><td>10</td><td>0.0</td><td>3.14j</td></tr><tr><td>100</td><td>15.20</td><td>45.j</td></tr><tr><td>-786</td><td>-21.9</td><td>9.322e-36j</td></tr><tr><td>080</td><td>32.3e+18</td><td>.876j</td></tr><tr><td>-0490</td><td>-90.</td><td>-.6545+0J</td></tr><tr><td>-0x260</td><td>-32.54e100</td><td>3e+26J</td></tr><tr><td>0x69</td><td>70.2E-12</td><td>4.53e-7j</td></tr></tbody></table><p>Python 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj，或者 complex(a,b) 表示， 复数的实部 <strong>a</strong> 和虚部 <strong>b</strong> 都是浮点型。</p><h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><p>Python中的字符串用单引号 ‘ 或双引号 “ 括起来，同时使用反斜杠 \ 转义特殊字符。</p><p>字符串的截取的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Runoob&#x27;</span>  <span class="comment"># 定义一个字符串变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)           <span class="comment"># 打印整个字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])     <span class="comment"># 打印字符串第一个到倒数第二个字符（不包含倒数第一个字符）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])        <span class="comment"># 打印字符串的第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])      <span class="comment"># 打印字符串第三到第五个字符（不包含索引为 5 的字符）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])       <span class="comment"># 打印字符串从第三个字符开始到末尾</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)       <span class="comment"># 打印字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&quot;TEST&quot;</span>)  <span class="comment"># 打印字符串和&quot;TEST&quot;拼接在一起</span></span><br></pre></td></tr></table></figure><p>执行以上程序会输出如下结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runoob</span><br><span class="line">Runoo</span><br><span class="line">R</span><br><span class="line">noo</span><br><span class="line">noob</span><br><span class="line">RunoobRunoob</span><br><span class="line">RunoobTEST</span><br></pre></td></tr></table></figure><p>Python 使用反斜杠 <code>\</code> 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 <code>r</code>，表示原始字符串：</p><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;Ru\noob&#x27;</span>)</span><br><span class="line">Ru</span><br><span class="line">oob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">r&#x27;Ru\noob&#x27;</span>)</span><br><span class="line">Ru\noob</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>另外，反斜杠<code>\</code>可以作为续行符，表示下一行是上一行的延续。也可以使用 <strong><code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>** <strong>“””…”””</strong>  或者 **<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code></strong> <strong>‘’’…’’’</strong>  跨越多行。</p><p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串，案例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(word[<span class="number">0</span>], word[<span class="number">5</span>])</span><br><span class="line">P n</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(word[-<span class="number">1</span>], word[-<span class="number">6</span>])</span><br><span class="line">n P</span><br></pre></td></tr></table></figure><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如 <code>word[0] = &#39;m&#39;</code> 会导致错误</p><p><strong>注意：</strong></p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用<code>+</code>运算符连接在一起，用<code>*</code>运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><hr><h2 id="bool（布尔类型）"><a href="#bool（布尔类型）" class="headerlink" title="bool（布尔类型）"></a>bool（布尔类型）</h2><p>布尔类型即 True 或 False。</p><p>在 Python 中，True 和 False 都是关键字，表示布尔值。</p><p>布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。</p><p>布尔类型特点：</p><ul><li>布尔类型只有两个值：True 和 False。</li><li>bool 是 int 的子类，因此布尔值可以被看作整数来使用，其中 True 等价于 1。</li><li>布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会将 True 视为 1，False 视为 0。</li><li>布尔类型可以和逻辑运算符一起使用，包括 and、or 和 not。这些运算符可以用来组合多个布尔表达式，生成一个新的布尔值。</li><li>布尔类型也可以被转换成其他数据类型，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。</li><li>可以使用 <code>bool()</code> 函数将其他类型的值转换为布尔值。以下值在转换为布尔值时为 <code>False</code>：<code>None</code>、<code>False</code>、零 (<code>0</code>、<code>0.0</code>、<code>0j</code>)、空序列（如 <code>&#39;&#39;</code>、<code>()</code>、<code>[]</code>）和空映射（如 <code>&#123;&#125;</code>）。其他所有值转换为布尔值时均为 <code>True</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔类型的值和类型</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔类型的整数表现</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">True</span>))   <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="literal">False</span>))  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 bool() 函数进行转换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))         <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">42</span>))        <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>))        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&#x27;Python&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([]))        <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔逻辑运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)        <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔比较运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt; <span class="number">3</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> == <span class="number">2</span>) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> &lt; <span class="number">4</span>)  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔值在控制流中的应用</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This will always print&quot;</span>)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This will also always print&quot;</span>)</span><br><span class="line">   </span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is non-zero and thus True in a boolean context&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 在 Python 中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 <strong>0、空字符串、空列表、空元组</strong>等被视为 False。因此，在进行布尔类型转换时，需要注意数据类型的真假性。</p><hr><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[头下标:尾下标]</span><br></pre></td></tr></table></figure><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p><p><img src="/img/list_slicing1_new1.png"></p><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span> ]  <span class="comment"># 定义一个列表</span></span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>)            <span class="comment"># 打印整个列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>])         <span class="comment"># 打印列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 打印列表第二到第四个元素（不包含第四个元素）</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:])        <span class="comment"># 打印列表从第三个元素开始到末尾</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 打印tinylist列表两次</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist)  <span class="comment"># 打印两个列表拼接在一起的结果</span></span><br></pre></td></tr></table></figure><p>与Python字符串不一样的是，列表中的元素是可以改变的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 []</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>List 内置了有很多方法，例如 append()、pop() 等等，这在后面会讲到。</p><p><strong>注意：</strong></p><ul><li>1、列表写在方括号之间，元素用逗号隔开。</li><li>2、和字符串一样，列表可以被索引和切片。</li><li>3、列表可以使用 + 操作符进行拼接。</li><li>4、列表中的元素是可以改变的。</li></ul><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p><p><img src="/img/py-dict-1.png"></p><p>如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverseWords</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 通过空格将字符串分隔符，把各个单词分隔为列表</span></span><br><span class="line">    inputWords = <span class="built_in">input</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 翻转字符串</span></span><br><span class="line">    <span class="comment"># 假设列表 list = [1,2,3,4],  </span></span><br><span class="line">    <span class="comment"># list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)</span></span><br><span class="line">    <span class="comment"># inputWords[-1::-1] 有三个参数</span></span><br><span class="line">    <span class="comment"># 第一个参数 -1 表示最后一个元素</span></span><br><span class="line">    <span class="comment"># 第二个参数为空，表示移动到列表末尾</span></span><br><span class="line">    <span class="comment"># 第三个参数为步长，-1 表示逆向</span></span><br><span class="line">    inputWords=inputWords[-<span class="number">1</span>::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 重新组合字符串</span></span><br><span class="line">    output = <span class="string">&#x27; &#x27;</span>.join(inputWords)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">input</span> = <span class="string">&#x27;I like runoob&#x27;</span></span><br><span class="line">    rw = reverseWords(<span class="built_in">input</span>)</span><br><span class="line">    <span class="built_in">print</span>(rw)</span><br></pre></td></tr></table></figure><p>输出结果为：<code>runoob like I</code></p><hr><h2 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h2><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">abcd</span><br><span class="line">(<span class="number">786</span>, <span class="number">2.23</span>)</span><br><span class="line">(<span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">(<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br></pre></td></tr></table></figure><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看与列表类似，这里不再赘述）。</p><p>其实，可以把字符串看作一种特殊的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tup[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup[<span class="number">0</span>] = <span class="number">11</span>  <span class="comment"># 修改元组元素的操作是非法的</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p><p>&#96;tup1 &#x3D; ()    # 空元组  </p><p>tup2 &#x3D; (20,) # 一个元素，需要在元素后添加逗号&#96;</p><p>如果你想创建只有一个元素的元组，需要注意在元素后面添加一个逗号，以区分它是一个元组而不是一个普通的值，这是因为在没有逗号的情况下，Python会将括号解释为数学运算中的括号，而不是元组的表示。</p><p>如果不添加逗号，如下所示，它将被解释为一个普通的值而不是元组：</p><p><code>not_a_tuple = (42)</code></p><p>这样的话，not_a_tuple 将是整数类型而不是元组类型。</p><p>string、list 和 tuple 都属于 sequence（序列）。</p><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用 <code>+</code> 操作符进行拼接。</li></ul><hr><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>Python 中的集合（Set）是一种<strong>无序、可变</strong>的数据类型，用于存储唯一的元素。</p><p>集合中的元素不会重复，并且可以进行交集、并集、差集等常见的集合操作。</p><p>在 Python 中，集合使用大括号 <code>&#123;&#125;</code> 表示，元素之间用逗号 , 分隔。</p><p>另外，也可以使用 <code>set()</code> 函数创建集合。</p><p><strong>注意</strong>：创建一个空集合必须用 <code>set()</code> 而不是 <code>&#123; &#125;</code>，因为 <code>&#123; &#125;</code> 是用来创建一个空字典。</p><p>创建格式：</p><p>&#96;parame &#x3D; {value01,value02,…}  </p><p>或者  </p><p>set(value)&#96;</p><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sites)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Runoob&#x27;</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 不在集合中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><p>&#96;{‘Zhihu’, ‘Baidu’, ‘Taobao’, ‘Runoob’, ‘Google’, ‘Facebook’}  </p><p>Runoob 在集合中  </p><p>{‘b’, ‘c’, ‘a’, ‘r’, ‘d’}  </p><p>{‘r’, ‘b’, ‘d’}  </p><p>{‘b’, ‘c’, ‘a’, ‘z’, ‘m’, ‘r’, ‘l’, ‘d’}  </p><p>{‘c’, ‘a’}  </p><p>{‘z’, ‘b’, ‘m’, ‘r’, ‘l’, ‘d’}&#96;</p><hr><h2 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h2><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><p>&#96;1 - 菜鸟教程  </p><p>2 - 菜鸟工具  </p><p>{‘name’: ‘runoob’, ‘code’: 1, ‘site’: ‘<code>[www.runoob.com](http://www.runoob.com)</code>‘}  </p><p>dict_keys([‘name’, ‘code’, ‘site’])  </p><p>dict_values([‘runoob’, 1, ‘<code>[www.runoob.com](http://www.runoob.com)</code>‘])&#96;</p><p>构造函数 dict() 可以直接从键值对序列中构建字典如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;Google&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;Taobao&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line">&#123;<span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p><code>&#123;x: x**2 for x in (2, 4, 6)&#125;</code> 该代码使用的是字典推导式，更多推导式内容可以参考：<a href="https://www.runoob.com/python3/python-comprehensions.html">Python 推导式</a>。</p><p>另外，字典类型也有一些内置的函数，例如 clear()、keys()、values() 等。</p><p><strong>注意：</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用 <code>&#123; &#125;</code>。</li></ul><hr><h2 id="bytes-类型"><a href="#bytes-类型" class="headerlink" title="bytes 类型"></a>bytes 类型</h2><p>在 Python3 中，bytes 类型表示的是不可变的二进制序列（byte sequence）。</p><p>与字符串类型不同的是，bytes 类型中的元素是整数值（0 到 255 之间的整数），而不是 Unicode 字符。</p><p>bytes 类型通常用于处理二进制数据，比如图像文件、音频文件、视频文件等等。在网络编程中，也经常使用 bytes 类型来传输二进制数据。</p><p>创建 bytes 对象的方式有多种，最常见的方式是使用 b 前缀：</p><p>此外，也可以使用 bytes() 函数将其他类型的对象转换为 bytes 类型。bytes() 函数的第一个参数是要转换的对象，第二个参数是编码方式，如果省略第二个参数，则默认使用 UTF-8 编码：</p><p><code>x = bytes(&quot;hello&quot;, encoding=&quot;utf-8&quot;)</code></p><p>与字符串类型类似，bytes 类型也支持许多操作和方法，如切片、拼接、查找、替换等等。同时，由于 bytes 类型是不可变的，因此在进行修改操作时需要创建一个新的 bytes 对象。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">b&quot;hello&quot;</span></span><br><span class="line">y = x[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># 切片操作，得到 b&quot;el&quot;</span></span><br><span class="line">z = x + <span class="string">b&quot;world&quot;</span>  <span class="comment"># 拼接操作，得到 b&quot;helloworld&quot;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，bytes 类型中的元素是整数值，因此在进行比较操作时需要使用相应的整数值。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">b&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">if</span> x[<span class="number">0</span>] == <span class="built_in">ord</span>(<span class="string">&quot;h&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The first element is &#x27;h&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p>其中 ord() 函数用于将字符转换为相应的整数值。</p><hr><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>complex(real[,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象x转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象x转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式，并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列s转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列s转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典，d必须是一个(key，value)元组序列</td></tr><tr><td>frozense(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><hr><img src="/img/teto1：1.jpg" alt="示例图片" width="160px" style="border: 1px solid #eee;">]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>新闻学概论 （二）新闻学科的性质与知识结构</title>
      
      <link href="/2025/05/09/%E6%96%B0%E9%97%BB%E5%AD%A6%E6%A6%82%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89%E6%96%B0%E9%97%BB%E5%AD%A6%E7%A7%91%E7%9A%84%E6%80%A7%E8%B4%A8%E4%B8%8E%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/"/>
      <url>/2025/05/09/%E6%96%B0%E9%97%BB%E5%AD%A6%E6%A6%82%E8%AE%BA%EF%BC%88%E4%BA%8C%EF%BC%89%E6%96%B0%E9%97%BB%E5%AD%A6%E7%A7%91%E7%9A%84%E6%80%A7%E8%B4%A8%E4%B8%8E%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="新闻学概论-（二）新闻学科的性质与知识结构"><a href="#新闻学概论-（二）新闻学科的性质与知识结构" class="headerlink" title="新闻学概论 （二）新闻学科的性质与知识结构"></a><strong>新闻学概论 （二）新闻学科的性质与知识结构</strong></h1><hr><h2 id="一、新闻学科的性质"><a href="#一、新闻学科的性质" class="headerlink" title="一、新闻学科的性质"></a>一、新闻学科的性质</h2><p><strong>问题一：Journalism指的到底是新闻学、新闻工作还是新闻业？</strong></p><ul><li><p>业界觉得学界缺乏实践性，学生与新闻业界之间存在鸿沟。</p></li><li><p>学界觉得业界缺乏学术性，业界太过于依赖经验性。</p></li></ul><p><strong>问题二：新闻工作到底是一门手艺（craft）还是专业（profession）？</strong></p><p>在众多的人文社科中，比如中文学、哲学等，与实际职业不存在挂钩</p><p>很显然，我们将理工学科的思维放在了人文社科中，理工科的视角下，学科的存在是建立在使用导向的。</p><p>这个问题很难有答案。</p><hr><p>那么，新闻学的性质是什么呢？</p><h3 id="一般认为，新闻学是一门具有鲜明实践性和人文色彩的社会科学。新闻学主要研究对象是新闻传播现象、新闻传播活动，以及人与新闻、社会的关系。"><a href="#一般认为，新闻学是一门具有鲜明实践性和人文色彩的社会科学。新闻学主要研究对象是新闻传播现象、新闻传播活动，以及人与新闻、社会的关系。" class="headerlink" title="一般认为，新闻学是一门具有鲜明实践性和人文色彩的社会科学。新闻学主要研究对象是新闻传播现象、新闻传播活动，以及人与新闻、社会的关系。"></a><strong>一般认为，新闻学是一门具有鲜明实践性和人文色彩的社会科学。新闻学主要研究对象是新闻传播现象、新闻传播活动，以及人与新闻、社会的关系。</strong></h3><p><em>自然科学：研究对象为自然世界，获取真理性认识，把握自然世界规律</em></p><p><em>社会科学：关注社会事实，试图把握社会演变规律</em></p><p><em>人文学科：以人本身以及人的生存处境，生存状况和生活意义为对象，认识主体的探索和思考</em></p><p>从自然科学到人文学科，解释空间<em>可能性空间</em>由小到大。自然科学是*实然（事实）<em>的，人文学科是</em>因然（价值）*的，社会科学是二者共有的。</p><hr><h2 id="二、新闻学的对象和任务"><a href="#二、新闻学的对象和任务" class="headerlink" title="二、新闻学的对象和任务"></a><strong>二、新闻学的对象和任务</strong></h2><h3 id="1-新闻学的主要研究对象"><a href="#1-新闻学的主要研究对象" class="headerlink" title="1.新闻学的主要研究对象"></a>1.新闻学的主要研究对象</h3><p><strong>人类的新闻活动、新闻业、以及它们与人类其他活动领域的关系。</strong></p><h3 id="2-新闻学主要任务"><a href="#2-新闻学主要任务" class="headerlink" title="2.新闻学主要任务"></a>2.新闻学主要任务</h3><p><strong>探究新闻活动自身的特点和规律，揭示新闻活动与整个社会的关系和相互机制，为新闻活动开展、新闻传播业的良性发展提供理论、观念、知识、技能和方法。</strong></p><blockquote><p>新闻系统联系于经济系统、技术系统、政治系统、法律系统、文化系统等</p></blockquote><h2 id="三、新闻学知识的基本结构"><a href="#三、新闻学知识的基本结构" class="headerlink" title="三、新闻学知识的基本结构"></a><strong>三、新闻学知识的基本结构</strong></h2><ul><li>历史新闻学：研究人类新闻活动历史的“科学”</li><li>应用新闻学：以新闻传播业务为主要对象的学科分支</li><li>理论新闻学：主要研究新闻现象的本质与特征，揭示新闻规律</li><li>交叉新闻学：以新闻传播与其他社会活动的交叉领域为对象</li></ul><h2 id="四、新闻学（新闻理论）的基本问题和问题体系"><a href="#四、新闻学（新闻理论）的基本问题和问题体系" class="headerlink" title="四、新闻学（新闻理论）的基本问题和问题体系"></a><strong>四、新闻学（新闻理论）的基本问题和问题体系</strong></h2><h3 id="新闻学（新闻理论）的基本问题：事实与新闻的关系问题"><a href="#新闻学（新闻理论）的基本问题：事实与新闻的关系问题" class="headerlink" title="新闻学（新闻理论）的基本问题：事实与新闻的关系问题"></a>新闻学（新闻理论）的基本问题：事实与新闻的关系问题</h3><ul><li>新闻本体论：事实是新闻的本质</li><li>新闻认识论：新闻是事实的呈现（触动的反映、陈述、再现）</li><li>新闻价值论：新闻有选择地呈现事实</li><li>新闻方法论：新闻以自身方式呈现事实</li></ul><h2 id="五、新闻理论的基本内容"><a href="#五、新闻理论的基本内容" class="headerlink" title="五、新闻理论的基本内容"></a><strong>五、新闻理论的基本内容</strong></h2><p>新闻理论:主要研究新闻现象的本质与特征，揭示**新闻现象(新闻活动、新闻业)**的基本规律，以及新闻活动、新闻业与整个社会系统的互动关系</p><p>下分三个理论：</p><ul><li>新闻本体论:新闻本身为对象，本质、特征、功能、新闻传收、新闻矛盾、新闻规律、新闻观念等</li><li>新闻业态论:从系统论角度研究新闻业的产生、演变、性质、管理、运行、机制等</li><li>新闻关系论:研究新闻活动与人类其他社会活动的关系</li></ul><h2 id="六、主要新闻理论"><a href="#六、主要新闻理论" class="headerlink" title="六、主要新闻理论"></a>六、主要新闻理论</h2><ol><li><p>自由主义新闻（媒介）理论</p><p>源于欧，盛于美。根基是欧美社会思潮中的个人主义、（古典）自由主义、政治体质以及基督宗教伦理，表现为自由主义新闻传媒制度及其理论</p><ul><li><p>资产私人所有制（大集团）、形式上与政府保持自主关系，受法律和社会约束</p></li><li><p>宣称作为民意的中介、第四权力、诉诸舆论的监督力量</p></li><li><p>持有“意见自由市场”和“自我修正”的观念</p></li><li><p>个体主义之上，持有西方现代性观念，对外和对内有所区别，“遮蔽”意识形态</p><p>一些案例：西方媒体宣传一些中国崩溃论和中国威胁论，这是他们殖民体系观念的体现</p></li></ul></li><li><p>社会责任新闻理论</p><p>20世纪40年代由美国一批学者创建，是自由主义理论的一种补充和发展，逐渐成为欧美的一种主导型理论</p><p>标志：1947年3月的研究报告《一个自由而负责任的新闻界》（又称“哈钦斯报告”）</p><ul><li>交换评论和批评的论坛</li><li>供社会各群体互相传递意见和态度</li><li>呈现与阐明社会目标与价值观方法</li><li>将信息流、思想流和感情流传递到社会成员</li></ul></li><li><p>发展新闻（传播）理论：</p><p>二战以后，由一批西方学者和发展中国家学者推动。核心内容是国家的发展尤其经济发展是一切发展中国家的首要任务，新闻媒介必须服从、服务、促进国家发展。</p><ul><li>新闻媒介与政府关系的一致</li><li>注重新闻媒介的守望、整合、教育功能</li><li>将社会发展和媒介发展分为不同阶段，持有进步主义观念</li><li>以西方现代性为发展的唯一目标</li></ul></li><li><p><strong>马克思主义新闻理论（马克思主义新闻观）</strong></p><p>由马克思恩格斯开创、提供<strong>思想源泉</strong>，由苏联发展<strong>党报理论</strong>，并由中国共产党人<strong>结合中国实际</strong>发展起来的新闻理论体系，体现为<strong>中国化时代化</strong>的特征；</p><p>是马克思主义立场、观点和方法在新闻传播领域的反映和体现；</p><p>其核心是马克思主义关于无产阶级及其政党新闻事业根本性质、工作原则和运行规律等基本观点</p><ul><li>新闻传媒的意识形态属性及其目标任务、新闻子系统与社会系统的关系</li><li>新闻传播规律、党性与人民性相统一、正确舆论观</li><li>中国革命和建国的经验、中国发展的目标与任务、中国政治经济体制、中国社会文化系统</li></ul></li><li><p><strong>建设性新闻理论（Constructive Journalism)</strong></p><p>丹麦记者吉登斯特德(Cathrine Gyldensted)和哈根洛普(Ulrik Haagerup)是建设性新闻理论的先驱，2011年吉登斯特德和麦金泰尔将建设性新闻概念化。</p><p>值得注意的是，这个新闻理论是建立在西方自由主义新闻理论体系之上的</p><blockquote><p>建设性新闻主张作为一种公共导向的新闻实践，以问题导向、未来导向、行动导向的视角报道新闻时事，强调新闻报道采用积极心理学和受众参与。</p></blockquote></li></ol><h2 id="七、传统新闻学研究的四种范式"><a href="#七、传统新闻学研究的四种范式" class="headerlink" title="七、传统新闻学研究的四种范式"></a><strong>七、传统新闻学研究的四种范式</strong></h2><ul><li><p>史前一规范化(normative)范式:在社会传播和政治协商的语境中新闻是什么，较少关心新闻生产过程，新闻学的德国传统。</p></li><li><p>经验实证(empirical)范式:新闻教育和培训，受社会科学实证研究影响，新闻人、专业价值观、编辑机构、工作惯例等。</p></li><li><p>社会学(sociological)范式:民族志、话语分析等定性研究方法，关注国家和精英新闻机构的工作和作品。</p></li><li><p>全球化-比较研究(global-comparative):新闻作为全球化现象，新通信技术，比较新闻学的兴起。</p></li></ul><h2 id="八、新闻学研究对象的变迁"><a href="#八、新闻学研究对象的变迁" class="headerlink" title="八、新闻学研究对象的变迁"></a><strong>八、新闻学研究对象的变迁</strong></h2><ol><li>前职业化：对于纸媒的研究</li><li>职业化&#x2F;工业化：对于广播电视、互联网新媒体的研究</li><li>社会化&#x2F;关系化：非职业的新闻相关工作出现，新闻功能下沉，研究方向变为数字新闻、融合新闻</li></ol><h3 id="新闻学理论范式创新的热点：数字新闻学"><a href="#新闻学理论范式创新的热点：数字新闻学" class="headerlink" title="新闻学理论范式创新的热点：数字新闻学"></a>新闻学理论范式创新的热点：数字新闻学</h3><p>C W.Anderson 提出的新闻生态理论(news ecosystem theory )被认为构成了数字新闻学的理论基础。安德森本人也赞同建立“社会——物质”新范式(socio-material paradigm)。</p><p>数字新闻学(digital journalism)作为一种新的理论体系，可以对规范范式、经验主义范式、社会学范式和全球比较范式四种传统新闻学的理论范式实现突破。四个维度:价值内核、核心概念、研究实践、批判理论。(常江，2020)</p><p>数字新闻学在本体论上是生态转向，认识论上是情感转向，方法论上是文化研究转向(常江，田浩，2021)。在数字科技与新闻实践下，数字新闻学的逻辑起点是数字新闻(内容)与人(陆小华，2021)。</p><h2 id="九、数字时代的中国新闻学"><a href="#九、数字时代的中国新闻学" class="headerlink" title="九、数字时代的中国新闻学"></a><strong>九、数字时代的中国新闻学</strong></h2><p><strong>哲学社会科学研究的典型特征:</strong></p><ul><li><p>“中国社会学是世界社会学的组成部分，近代以来的社会学是从西方引进的，但是中国社会学的发展是中国学者在对中国文化与实践的研究中不断推进的。” (洪大用，2021)</p></li><li><p>中国的政治学研究，需要回答古代中国和当代中国的“中国性”问题，当代中国政治学的使命之一就是对当代中国是如何来的、如何组织起来的，作出概念化解释。 (杨光斌，2019)</p></li><li><p>社会科学旨在揭开人与社会的多元性、复杂性和矛盾性，讲求各种“条件性”(conditionality)，故必须捕捉时间(历史)与空间(全球)如何影响事物的“常与变”及其变化的“同与异”。 (李金铨，2017)</p></li><li><p>“当代中国新闻学，是当代中国语境中现代性、理论性、社会性和阶级性 (集中表现为党性)相统一的新闻学。” (杨保军，2022)</p></li></ul><p><strong>中国新闻学的问题意识和实践起点:</strong></p><ul><li><p>从西方新闻学理论分析中国的“悖论实际”情况:即从西方主要理论来看中国实际的悖论性 (黄宗智，2016).</p></li><li><p>西方新闻学研究的单一世界观:过去一个世纪占据霸权的西方新闻学模式主导了规范性的讨论，但这一模式其实是19世纪末西方新闻实践的产物，而且并未描述过非西方的新闻环境。 ( Nerone,2016)</p></li><li><p>如，舒德森指出的新闻业扮演的七种角色和功能，这是一种典型的规范理论范式，预置了西方式民主制度及其社会观念的优先性和不容置疑的前提。</p></li></ul><p><strong>如何理解中国的实践?</strong></p><ul><li>中国式现代化实践:人口规模巨大的现代化、全体人民共同富裕的现代化、物质文明与精神文明相协调的现代化、人与自然和谐共生的现代化、走和平发展道路的现代化。</li></ul><p><strong>如何理解中国新闻学与西方新闻学的关系问题:</strong></p><ul><li><p>普遍、特殊与个别的同一性理解:如果说有普遍性的新闻学知识的话，那一定是包括了中国新闻学(个别)与西方新闻学(个别)在内的动态的、差异的普遍新闻学。</p></li><li><p>作为方法论的普遍性:从方法论层面阐释当代中国新闻学的根本理论性质–马克思主义理论性质，具有普遍性方法论意涵的马克思主义新闻观，是当代中国新闻实践的深层逻辑。</p></li><li><p>中国新闻学的发展历程来看:20世纪初早期新闻学–延安时期中国共产党人基于新闻宣传的实践经验，将马列主义基本原理同中国实际相结合，开创了马克思主义新闻学的理论范式-新中国成立以来，在社会主义现代化事业的实践中不断发展——改革开放以来，实践与知识的更新推动了新闻传播学的学科面貌、学术领域和知识版图。</p></li></ul><p><strong>构建中国新闻传播学自主知识体系</strong></p><ul><li>“加快构建中国特色哲学社会科学，归根结底是建构中国自主的知识体系。要以中国为观照、以时代为观照，立足中国实际解决中国问题，不断推动中华优秀传统文化创造性转化、创新性发展，不断推进知识创新、理论创新、方法创新，使中国特色哲学社会科学真正屹立于世界学术之林” (习近平，2022)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 新闻学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>新闻学概论（一）新闻学：历史、理论与知识体系</title>
      
      <link href="/2025/04/25/%E6%96%B0%E9%97%BB%E5%AD%A6%E6%A6%82%E8%AE%BA%EF%BC%88%E4%B8%80%EF%BC%89%20%E4%B8%AD%E5%A4%96%E6%96%B0%E9%97%BB%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
      <url>/2025/04/25/%E6%96%B0%E9%97%BB%E5%AD%A6%E6%A6%82%E8%AE%BA%EF%BC%88%E4%B8%80%EF%BC%89%20%E4%B8%AD%E5%A4%96%E6%96%B0%E9%97%BB%E5%8F%91%E5%B1%95%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="新闻学概论（一）新闻学：历史、理论与知识体系"><a href="#新闻学概论（一）新闻学：历史、理论与知识体系" class="headerlink" title="新闻学概论（一）新闻学：历史、理论与知识体系"></a>新闻学概论（一）新闻学：历史、理论与知识体系</h1><hr><blockquote><p>指导教材《新闻学概论》（马工程）</p></blockquote><h2 id="新闻学的发展历史"><a href="#新闻学的发展历史" class="headerlink" title="新闻学的发展历史"></a>新闻学的发展历史</h2><h3 id="一、思考的问题"><a href="#一、思考的问题" class="headerlink" title="一、思考的问题"></a><strong>一、思考的问题</strong></h3><ul><li>在发生重大突发事件时，你是否想要获知该事件的状况和进展?</li><li>你可以从哪些渠道(媒介)获取关于该事件的进展?</li><li>你如何相信你获得的信息是符合实际情况(现实)的?</li><li>除了重大突发事件，你还关心哪些类型的信息?</li><li>在日常生活中，你认为哪些信息是至关重要的?</li><li>你能够准确分辨日常生活中这些信息的边界吗?</li><li>你知道这些信息背后是怎么产生(生产)出来的吗?</li></ul><p>如果你能回答这些问题，说明你已经对新闻有了最基本的概念。事实上，新闻已经存在于我们的生活之中了。</p><hr><h3 id="二、全球新闻学的发展历史"><a href="#二、全球新闻学的发展历史" class="headerlink" title="二、全球新闻学的发展历史"></a><strong>二、全球新闻学的发展历史</strong></h3><p><strong>1.新闻学研究的早期阶段</strong></p><p>1690年 德国人托比阿斯发表**《论出版自由》<strong>,首次出现</strong>新闻价值**的概念</p><p>17-19世纪，约翰.弥尔顿、约翰.洛克、马、恩等思想家都讨论过报刊、新闻、舆论等问题</p><p>1845年，普尔兹**《德国新闻事业史》**出版</p><hr><p><strong>2.中期阶段 大众化阶段</strong></p><p>新闻学研究的时代背景——十九世纪上半叶大众化新闻业的发展：</p><p>出现便士报、通讯社、商业化、大众化等特征，新闻报刊上出现广告等<strong>二次售卖</strong>环节，<strong>大众化</strong>是现代新闻业得以发展的重要标志</p><hr><p><strong>3.新闻学研究的真正起步阶段</strong> ——新闻活动激增、大学教育开展</p><p>19世纪末，形成新闻学，其标志是大学开设新闻学课程。最早在<strong>德国和瑞士</strong>的一些大学设立专科。</p><p>1916年，<strong>莱比锡新闻研究所</strong>成立</p><p><strong>世界上第一所新闻学院</strong>：1908年，<strong>美国密苏里大学新闻学院</strong>。创始人为沃尔特.威廉，创立《记者守则》。曾访问中国申报馆。</p><p>最早的一批新闻学著作： 1899年松本君平《新闻学》；1903年休曼《实用新闻学》；1924约斯特《新闻学原理》。</p><p>同时，一大波学科随新闻学发展起来，如<strong>传播学、广告学</strong>等</p><hr><p><strong>4.现代新闻学发展</strong></p><p>2004年，德国艾尔福特发起“<strong>全球化时代的新闻学研究</strong>”国际会议</p><hr><h3 id="三、中国新闻学的发展历史"><a href="#三、中国新闻学的发展历史" class="headerlink" title="三、中国新闻学的发展历史"></a><strong>三、中国新闻学的发展历史</strong></h3><p><strong>1.中国新闻学研究的萌芽阶段</strong></p><p>《<strong>外国文史</strong>》中对新闻的论述181个字，<strong>第一篇</strong>在中国出现的关于新闻学的论述</p><p>据考证，1834年普鲁士教士在**《东西洋考每月统纪传》**第三期,发表《<strong>新闻纸概论</strong>》，这是第二篇中文出版方面的现代文章</p><hr><p><strong>2.中国新闻学研究的政治传统</strong> <em>强调新闻的耳目、喉舌功能</em></p><p>1876年，王韬在《循环日报》中发表《论日报渐行于中土》，文中对“泰西日报”推崇备至</p><p>19世纪下半叶，关于现代新闻报刊讨论开始增多，比较突出的参与人群是清廷大臣、口岸知识分子、传教士</p><p>李秀云教授认为，1834年到1899年各报刊发表的论述新闻学的文章，申报占8篇，万国公报占12篇</p><p>1896年后，梁启超关于报刊与政治、报刊与舆论、初版自由、第四种族等论述，逐渐形成了“改良”、“启蒙”等新闻学方面较为系统的论述</p><p>当时的俄国，也同样处于新闻事业发展的历史错位中，政党报刊借解放农奴运动兴盛</p><p>中国共产党也学习了俄国的传统，借助新闻传播革命思想</p><hr><p><strong>3.中国新闻学教育的开端</strong></p><p>1918年10月，北京大学新闻学研究会成立，标志着中国新闻学的形成，也是中国新闻教育的开端。</p><p>徐宝璜（中国第一本新闻学著作《新闻学》的作者）、邵飘萍（马列传播先驱之一、“铁肩担道义，辣手著文章”，著作《实际应用新闻学》《新闻学总论》各偏重业务、理论）等人主讲。</p><p>1818-1819年毛泽东作为北大新闻学研究会会员</p><hr><p><strong>4.新闻学理论内核的成型：党报理论</strong></p><p>鉴于抗日战争和陕甘宁边区的环境特点和工作需要，1942年延安《解放日报》在毛泽东的领导下改版，中共的<strong>党报理论</strong>成型，包括：</p><ol><li>党报的<strong>基本任务</strong>是宣传党的政治方针政策方案（党性原则、党管媒体）；</li><li>党报的<strong>基本内容</strong>是正面宣传为主；</li><li>党报具有鲜明的<strong>阶级性</strong>，体现人民性（为人民服务）</li><li>无产阶级的新闻事业与资产阶级新闻事业有着<strong>根本区别</strong></li></ol><p>伴随着改版，《解放日报》发表一系列社论（包括以上观点）。</p><p>其中最具理论色彩的，便是1943年9月1日<strong>陆定一</strong>发表的文章**《我们对于新闻学的基本观点》**</p><hr><p><strong>党报理论与新闻学自主知识体系</strong>:以毛泽东同志为代表的中国共产党领导人的新闻思想，</p><p>以及<strong>张友渔、陆定一、胡乔木、范长江</strong>等人的新闻学观点，对于新闻学知识体系的发展尤其是此后中国新闻学自主知识体系的构建具有重要的意义</p><p><strong>党报理论的知识起点</strong>:首先是从“新闻是什么”加以讨论的，以界定新闻学的<strong>元问题</strong>为基础的、对中国新闻学元问题做出了<strong>辩证唯物主义</strong>的阐释。</p><p><strong>知识的建构逻辑</strong>:与此前新闻学中关于“新闻”的<strong>经验主义诠释</strong>不同，</p><p>陆定一采用的是<strong>演绎的逻辑</strong>，即运用<strong>辩证唯物主义</strong>的一般原理来理解和界定新闻和新闻活动。(新闻的定义：<strong>新闻是新近发生的事实的报道</strong>。）</p><p><strong>作为实践的新闻学知识</strong>:将新闻事业放置在党和国家的整体事业中加以定位，强调新闻的目的在于为更大的政治与社会目标服务，新闻学知识应该观照国家与社会发展。</p><p><strong>承认知识的意识形态属性</strong>:党的新闻事业不是脱离于整体事业的，而是革命和建设事业的重要组成部分;</p><p>只有为人民服务的报纸，与人民有密切联系的报纸，才能得到真实的新闻;即新闻工作要为更大的政治实践服务，为中国的现代化进程(包括国家的现代化和人的现代化)服务。</p><hr><p><strong>黄天鹏</strong>，在20世纪30年代组织编辑出版了30多种新闻学书籍，多为整理总结。</p><p>新中国成立之后，新闻学研究的范式发生了转化，马克思主义的新闻学范式占据主导。1952年底，全国新闻出版业和广播电台完成国有化改造，所有传媒成为各级党政机关的一部分，<strong>新闻事业作为党和国家建设的构成部分</strong>。</p><hr><p><strong>5.改革开放后国内的新闻学研究</strong></p><p>建国以后第一本新闻理论的著作：<strong>甘惜分</strong>（1916-2016）先生的**《新闻理论基础》**，于1982年内部印刷出版</p><p>1981年，复旦<strong>王中</strong>先生在《新闻大学》上连续发表多篇文章，对过去的一些新闻观点进行了讨论</p><p>甘惜分先生的新闻学知识建构:<strong>从《新闻理论基础》到《新闻学原理纲要》</strong>，建构理论体系的起点是马列主义新闻论著中着重解决的两个问题;知识结构上的变化外，还有诸如信息、新闻媒介、新闻控制、受众等新概念被引入到新闻理论体系中。一内核是马克思主义的立场、观点和方法论(辩证唯物主义)，理论的起点是新闻事实，贯穿理论体系的“红线”是新闻事业，而在价值论上则是新闻的**“倾向论”**。</p><p>王中先生的新闻学知识建构:<strong>从《新闻学原理大纲》到《论新闻》《论传播工具》《论宣传》《论新闻事业的阶级性》等</strong>，报纸商品性、读者需求论、社会需求论等问题的阐发，同样采用的<strong>辩证唯物主义</strong>的方法，“只有从社会的客观存在中去寻找答案”，“历史唯物主义是一把钥匙”。</p><p><strong>20世纪末的二十年间</strong>，正是在甘、王等一代学者的辛勤探索和引领下，一批新闻学者迅速成长起来，</p><p>他们著书立说、守正创新，在新闻学理论研究上各展其长，基本形成中国特色新闻学知识体系的主体框架，中国的新闻理论研究和新闻学知识面貌才迎来了一个新的局面。</p><blockquote><p>甘惜分谈到《新闻理论基础》是思想解放的结果，体系是独创的，可以说是具有中国特色的新闻理论，不同于外国同类的书，也不同于中国以往的新闻理论。</p></blockquote><blockquote><p>甘惜分把他的思想发展总结为三个时期，但以马克思主义作为指导思想，建设中国自己的新闻学，这个思想一直都没有变化。–<strong>“立足中国土，回到马克思”</strong></p></blockquote><hr><p><strong>历史自觉、理论自觉、体系自觉、科学自觉</strong>:一代学者自觉到历史的重任，既要总结和吸取历史的经验教训，更要为中国的学术和理论作出开拓性的贡献。</p><p>改革开放以来，拥有丰富的新闻工作经验并仍活跃在新闻实践一线的新闻工作者、管理者，参与到理论研究中。在现代化建设背景下，新闻一线的实践带来了丰富的素材，为知识探索提供了依据。</p><p><strong>安岗、郭超人、穆青、艾丰、杨伟光、梁衡</strong>等学者一个接一个为新闻学事业添砖加瓦</p><p>1982年<strong>安岗</strong>就提出，新闻研究要赶快抢救新闻史料等六个方面的问题，</p><p>“要把目前从事新闻实践的同志都吸引到研究工作上来，把他们长期积累的工作经验上升为理论”;</p><p><strong>穆青</strong>就<strong>世界性通讯社</strong>的标准、中国的特征等问题作出了理论上的阐述;</p><p><strong>艾丰</strong>形成了关于新闻采访的学理性观点;</p><p><strong>梁衡</strong>在多年的新闻实践和思考中，提出报纸的<strong>四个属性</strong>(信息属性、政治属性、文化属性和商品属性)、报纸市场的<strong>三个阶段</strong>、新闻与文学的<strong>本质区别</strong>等学术观点;</p><p>中国的新闻学者们很早就意识到了知识的体系性不足这一重要问题，学者们具有构建新闻理论体系的自觉意识</p><p><strong>《宏观新闻学》</strong>（1991年）、<strong>《现代新闻理论》</strong>（1998年）尝试构建成体系的新闻理论结构，</p><p>提出“从概念到原理，从知识要素到理论范畴的论证都需要建立现代的科学抽象体系”;</p><p><strong>《新闻学基本原理》</strong>（1993年），是较早采用传播的过程论述和分析新闻现象的一本著作，</p><p>“如果我们把新闻传播看成是一个大的系统的话，那么，在这个大的系统中，各组成部分既有自身规律，同时又有着相关性”</p><hr><p><strong>6.改开后，新闻学研究“重启”且传播学的输入</strong></p><p>1957年，复旦大学新闻系在翻译**《美国报纸的职能》**中首次出现了<code>mass communication</code>的引文，郑北渭翻译为“群众思想交通”</p><p>1978-1979年，开始正式<strong>翻译介绍</strong>传播学</p><p>1982年，<strong>中国社会科学院新闻研究所</strong>在北京倡议召开了第一次<strong>传播学研究会</strong></p><p>1982年，传播学者<strong>施拉姆</strong>访问北上广三市传播机构</p><hr><p><strong>发展历程</strong></p><blockquote><ol><li>西方新闻学知识的引入</li><li>政党报刊实践与新闻启蒙</li><li>中国新闻学创立并初步发展</li><li>马克思主义新闻学的引入</li><li>当代中国新闻学（新闻理论)的奠定</li><li>改革开放后的发展</li></ol></blockquote><h3 id="四、宏观背景补充"><a href="#四、宏观背景补充" class="headerlink" title="四、宏观背景补充"></a><strong>四、宏观背景补充</strong></h3><p><strong>1.新闻学研究和教育发展（1984-1992）</strong></p><ul><li><p>关于世界新技术革命的“热”起来，《第三次浪潮》《大趋势》等使人们的兴奋点重新转向了文化问题。</p></li><li><p>同时报业大发展，以党报为核心的多层次、多样化的报纸结构形成。比较集中讨论新闻改革。</p></li></ul><p><strong>2.新闻学研究的新时期（1992-至今）</strong></p><ul><li>市场经济改革、全球化、新技术革命等背景，党和国家对于新闻工作越来越重视，新闻传媒行业的繁荣。</li><li>新闻学的学术话语体系逐渐成型，在保持传统的同时，新闻学研究更看重学术化和研究的规范化，出现了一批学术化的成果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 新闻学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>影视后期合成技术&#92;:AE入门（一）</title>
      
      <link href="/2025/04/21/%E5%BD%B1%E8%A7%86%E5%90%8E%E6%9C%9F%E5%90%88%E6%88%90%E6%8A%80%E6%9C%AFAE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/04/21/%E5%BD%B1%E8%A7%86%E5%90%8E%E6%9C%9F%E5%90%88%E6%88%90%E6%8A%80%E6%9C%AFAE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 后期 </tag>
            
            <tag> AE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Python基础入门（一）基础概念及语法</title>
      
      <link href="/2025/04/21/Python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/04/21/Python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Python基础入门（一）基础概念及语法"><a href="#Python基础入门（一）基础概念及语法" class="headerlink" title="Python基础入门（一）基础概念及语法"></a>Python基础入门（一）基础概念及语法</h2><hr><h3 id="一、编码"><a href="#一、编码" class="headerlink" title="一、编码"></a><strong>一、编码</strong></h3><p>python3.X的源码文件使用<strong>UTF-8</strong>进行编码，所有的字符串都是<strong>unicode</strong>字符串。</p><p><em>UTF-8是unicode字符集中的一种，支持中文、日文、拉丁语种等，这意味着你可以在python3.X程序中部分使用中文标识，尽管这是不被推荐的。</em></p><h3 id="二、标识符"><a href="#二、标识符" class="headerlink" title="二、标识符"></a><strong>二、标识符</strong></h3><p>标识符（identifier）即用于标识<strong>变量、函数、类、模块</strong>等程序元素的名称，标识符是程序员自定义的名称。</p><p>标识符的使用需要遵守如下规则：</p><ul><li><strong>第一个字符</strong>必须以<strong>字母（a-z, A-Z）或</strong>下划线 _ 。</li><li>标识符的<strong>其他的部分</strong>由<strong>字母、数字和下划线</strong>组成。</li><li>标识符对<strong>大小写敏感</strong>，count 和 Count 是不同的标识符。</li><li>标识符对<strong>长度无硬性限制</strong>，但建议保持简洁（一般不超过 20 个字符）。</li><li><strong>禁止使用保留关键字</strong>（<em>keyword</em>），如 if、for、class 等不能作为标识符。</li></ul><p><strong>合法标识符：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">user_name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">_total = <span class="number">100</span></span><br><span class="line">MAX_SIZE = <span class="number">1024</span></span><br><span class="line">calculate_area()</span><br><span class="line">StudentInfo</span><br><span class="line">__private_var</span><br><span class="line">姓名 = <span class="string">&quot;张三&quot;</span>   <span class="comment"># 在python3合法</span></span><br><span class="line">π = <span class="number">3.14159</span>    <span class="comment"># 在python3合法</span></span><br></pre></td></tr></table></figure><p><strong>非法标识符：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2nd_place = <span class="string">&quot;silver&quot;</span>    <span class="comment"># 错误：以数字开头</span></span><br><span class="line">user-name = <span class="string">&quot;Bob&quot;</span>       <span class="comment"># 错误：包含连字符</span></span><br><span class="line"><span class="keyword">class</span> = <span class="string">&quot;Math&quot;</span>          <span class="comment"># 错误：使用关键字</span></span><br><span class="line">$price = <span class="number">9.99</span>          <span class="comment"># 错误：包含特殊字符</span></span><br><span class="line"><span class="keyword">for</span> = <span class="string">&quot;loop&quot;</span>           <span class="comment"># 错误：使用关键字</span></span><br></pre></td></tr></table></figure><h3 id="三、保留字（即关键字keyword）"><a href="#三、保留字（即关键字keyword）" class="headerlink" title="三、保留字（即关键字keyword）"></a><strong>三、保留字（即关键字keyword）</strong></h3><p><strong>保留字</strong>即<strong>关键字</strong><em>keyword</em>，我们<strong>不能</strong>把它们用作<strong>任何标识符名称</strong>。Python 的<strong>标准库</strong>提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><p><em>标准库即自带的库，无需手动下载</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>类别</strong></th><th align="left"><strong>关键字</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left"><strong>逻辑值</strong></td><td align="left"><code>True</code></td><td align="left">布尔真值</td></tr><tr><td align="left"></td><td align="left"><code>False</code></td><td align="left">布尔假值</td></tr><tr><td align="left"></td><td align="left"><code>None</code></td><td align="left">表示空值或无值</td></tr><tr><td align="left"><strong>逻辑运算</strong></td><td align="left"><code>and</code></td><td align="left">逻辑与运算</td></tr><tr><td align="left"></td><td align="left"><code>or</code></td><td align="left">逻辑或运算</td></tr><tr><td align="left"></td><td align="left"><code>not</code></td><td align="left">逻辑非运算</td></tr><tr><td align="left"><strong>条件控制</strong></td><td align="left"><code>if</code></td><td align="left">条件判断语句</td></tr><tr><td align="left"></td><td align="left"><code>elif</code></td><td align="left">否则如果（else if 的缩写）</td></tr><tr><td align="left"></td><td align="left"><code>else</code></td><td align="left">否则分支</td></tr><tr><td align="left"><strong>循环控制</strong></td><td align="left"><code>for</code></td><td align="left">迭代循环</td></tr><tr><td align="left"></td><td align="left"><code>while</code></td><td align="left">条件循环</td></tr><tr><td align="left"></td><td align="left"><code>break</code></td><td align="left">跳出循环</td></tr><tr><td align="left"></td><td align="left"><code>continue</code></td><td align="left">跳过当前循环的剩余部分，进入下一次迭代</td></tr><tr><td align="left"><strong>异常处理</strong></td><td align="left"><code>try</code></td><td align="left">尝试执行代码块</td></tr><tr><td align="left"></td><td align="left"><code>except</code></td><td align="left">捕获异常</td></tr><tr><td align="left"></td><td align="left"><code>finally</code></td><td align="left">无论是否发生异常都会执行的代码块</td></tr><tr><td align="left"></td><td align="left"><code>raise</code></td><td align="left">抛出异常</td></tr><tr><td align="left"><strong>函数定义</strong></td><td align="left"><code>def</code></td><td align="left">定义函数</td></tr><tr><td align="left"></td><td align="left"><code>return</code></td><td align="left">从函数返回值</td></tr><tr><td align="left"></td><td align="left"><code>lambda</code></td><td align="left">创建匿名函数</td></tr><tr><td align="left"><strong>类与对象</strong></td><td align="left"><code>class</code></td><td align="left">定义类</td></tr><tr><td align="left"></td><td align="left"><code>del</code></td><td align="left">删除对象引用</td></tr><tr><td align="left"><strong>模块导入</strong></td><td align="left"><code>import</code></td><td align="left">导入模块</td></tr><tr><td align="left"></td><td align="left"><code>from</code></td><td align="left">从模块导入特定部分</td></tr><tr><td align="left"></td><td align="left"><code>as</code></td><td align="left">为导入的模块或对象创建别名</td></tr><tr><td align="left"><strong>作用域</strong></td><td align="left"><code>global</code></td><td align="left">声明全局变量</td></tr><tr><td align="left"></td><td align="left"><code>nonlocal</code></td><td align="left">声明非局部变量（用于嵌套函数）</td></tr><tr><td align="left"><strong>异步编程</strong></td><td align="left"><code>async</code></td><td align="left">声明异步函数</td></tr><tr><td align="left"></td><td align="left"><code>await</code></td><td align="left">等待异步操作完成</td></tr><tr><td align="left"><strong>其他</strong></td><td align="left"><code>assert</code></td><td align="left">断言，用于测试条件是否为真</td></tr><tr><td align="left"></td><td align="left"><code>in</code></td><td align="left">检查成员关系</td></tr><tr><td align="left"></td><td align="left"><code>is</code></td><td align="left">检查对象身份（是否是同一个对象）</td></tr><tr><td align="left"></td><td align="left"><code>pass</code></td><td align="left">空语句，用于占位</td></tr><tr><td align="left"></td><td align="left"><code>with</code></td><td align="left">上下文管理器，用于资源管理</td></tr><tr><td align="left"></td><td align="left"><code>yield</code></td><td align="left">从生成器函数返回值</td></tr></tbody></table><h3 id="四、注释"><a href="#四、注释" class="headerlink" title="四、注释"></a><strong>四、注释</strong></h3><p>1.Python中<strong>单行注释</strong>以 <strong>#</strong> 开头，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello, Python!&quot;</span>) <span class="comment"># 第二个注释</span></span><br></pre></td></tr></table></figure><p>输出结果为：<code>Hello，Python</code></p><p>2.<strong>多行注释</strong>可以用<strong>多个 # 号</strong>，还有 <strong>‘’’ 和 “””</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第三注释</span></span><br><span class="line"><span class="string">第四注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第五注释</span></span><br><span class="line"><span class="string">第六注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello, Python!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果为：<code>Hello，Python</code></p><p>3.<strong>释放</strong>注释和多行注释：</p><p>选中注释行代码，使用<code>Ctrl+/</code>快捷键即可，注意是<code>斜杠/</code>不是<code>反斜杠\</code></p><h3 id="五、行与缩进"><a href="#五、行与缩进" class="headerlink" title="五、行与缩进"></a><strong>五、行与缩进</strong></h3><p>python最具特色的就是使用<strong>缩进</strong>来表示<strong>代码块</strong>，不需要使用大括号 <code>&#123;&#125;</code> 。</p><p>缩进的<strong>空格数</strong>是<strong>可变的</strong>，但是同一个代码块的语句必须包含<strong>相同的缩进空格数</strong>。<em>为了方便使用和审阅，一般以</em><em><strong>4个空格</strong></em> <em>为一组来使用。</em></p><p>实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="六、多行语句"><a href="#六、多行语句" class="headerlink" title="六、多行语句"></a><strong>六、多行语句</strong></h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用<strong>反斜杠</strong> <strong><code>\</code></strong> **** 来实现多行语句，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">item_one = <span class="number">1</span></span><br><span class="line">item_two = <span class="number">2</span></span><br><span class="line">item_three = <span class="number">3</span></span><br><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br><span class="line"><span class="built_in">print</span>(total) <span class="comment"># 输出为 6</span></span><br></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，*<em>不需要使用反斜杠 *</em>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="七、数字-Number-类型"><a href="#七、数字-Number-类型" class="headerlink" title="七、数字(Number)类型"></a><strong>七、数字(Number)类型</strong></h3><p>python中数字有四种类型：<strong>整数、布尔型、浮点数和复数</strong>。</p><ul><li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li><strong>bool</strong> (布尔), 如 True。</li><li><strong>float</strong> (浮点数), 如 1.23、3E-2</li><li><strong>complex</strong> (复数) - 复数由实部和虚部组成，形式为 a + bj，其中 a 是实部，b 是虚部，j 表示虚数单位。如 1 + 2j、 1.1 + 2.2j</li></ul><h3 id="八、字符串-String-相关"><a href="#八、字符串-String-相关" class="headerlink" title="八、字符串(String)相关"></a><strong>八、字符串(String)相关</strong></h3><p>在 Python3 中，<strong>字符串（String）</strong> 是一个<strong>不可变</strong>（immutable）的序列类型，用于表示文本数据。</p><ul><li>Python 中单引号 <code>&#39;</code> 和双引号 <code>&quot;</code> 使用完全相同。</li><li>使用三引号(‘’’ 或 “””)可以指定一个<strong>多行字符串</strong>。</li><li>转义符 <code>\</code>。</li><li>反斜杠<code>\</code>可以用来转义，使用 r 可以让反斜杠不发生转义。 如 <strong>r”this is a line with \n”</strong> 则 \n 会显示，并不是换行。</li><li>按字面意义级联字符串，如 <strong>“this “ “is “ “string”</strong> 会被自动转换为 <strong>this is string</strong>。</li><li>字符串可以用 <code>+</code> 运算符连接在一起，用 <code>*</code> 运算符重复。</li><li>Python 中的字符串有两种<strong>索引方式</strong>，<strong>从左往右以 0 开始</strong>，<strong>从右往左以 -1 开始</strong>。</li><li>Python 中的字符串不能改变。</li><li>Python 没有单独的字符类型，<strong>一个字符就是长度为 1 的字符串</strong>。</li><li>字符串切片 <code>str[start:end]</code>，其中 **start（包含）**是切片开始的索引，**end（不包含）**是切片结束的索引。</li><li>字符串的切片可以加上<strong>步长参数 step</strong>，语法格式如下：<code>str[start:end:step]</code></li></ul><p>实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)                 <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第六个的字符（不包含）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])          <span class="comment"># 输出从第二个开始到第五个且每隔一个的字符（步长为2）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&#x27;你好&#x27;</span>)         <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\nworld&#x27;</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nworld&#x27;</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456789</span></span><br><span class="line"><span class="number">12345678</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">345</span></span><br><span class="line"><span class="number">3456789</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">123456789123456789</span></span><br><span class="line"><span class="number">123456789</span>你好</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">hello\nworld</span><br></pre></td></tr></table></figure><p>上面的 r 指 raw，即 raw string，会自动将反斜杠转义，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)       <span class="comment"># 输出空行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;\n&#x27;</span>)      <span class="comment"># 输出 \n</span></span><br></pre></td></tr></table></figure><h3 id="九、转义"><a href="#九、转义" class="headerlink" title="九、转义"></a><strong>九、转义</strong></h3><p>在编程和文本处理中，<strong>转义字符（Escape Character）</strong> 是一个特殊符号，通常以反斜杠 <code>\</code> 开头，用于表示那些<strong>无法直接输入或具有特殊含义</strong>的字符。它的核心作用是“转义”——即<strong>改变</strong>后续字符的<strong>原始含义</strong>。</p><p>以下是 Python 中常用的转义字符：</p><table><thead><tr><th align="left">转义序列</th><th align="left">含义</th><th align="left">示例</th><th align="left">输出结果</th></tr></thead><tbody><tr><td align="left"><code>\\</code></td><td align="left">表示反斜杠本身</td><td align="left"><code>&quot;C:\\path&quot;</code></td><td align="left"><code>C:\path</code></td></tr><tr><td align="left"><code>\&#39;</code></td><td align="left">单引号</td><td align="left"><code>&#39;It\&#39;s me&#39;</code></td><td align="left"><code>It&#39;s me</code></td></tr><tr><td align="left"><code>\&quot;</code></td><td align="left">双引号</td><td align="left"><code>&quot;他说：\&quot;你好\&quot;&quot;</code></td><td align="left"><code>他说：&quot;你好&quot;</code></td></tr><tr><td align="left"><code>\n</code></td><td align="left">换行符</td><td align="left"><code>&quot;Hello\nWorld&quot;</code></td><td align="left"><code>Hello</code>（换行）<code>World</code></td></tr><tr><td align="left"><code>\t</code></td><td align="left">制表符（Tab空格）</td><td align="left"><code>&quot;Name:\tAlice&quot;</code></td><td align="left"><code>Name:   Alice</code></td></tr><tr><td align="left"><code>\r</code></td><td align="left">回车符（光标回到行首）</td><td align="left"><code>&quot;Hello\rWorld&quot;</code></td><td align="left"><code>World</code>（覆盖Hello）</td></tr><tr><td align="left"><code>\b</code></td><td align="left">退格符</td><td align="left"><code>&quot;Hel\blo&quot;</code></td><td align="left"><code>Helo</code>（删除前一个字符）</td></tr><tr><td align="left"><code>\uxxxx</code></td><td align="left">Unicode 码点（4位十六进制）</td><td align="left"><code>&quot;\u4e2d&quot;</code></td><td align="left"><code>中</code></td></tr><tr><td align="left"><code>\Uxxxxxxxx</code></td><td align="left">Unicode 码点（8位十六进制）</td><td align="left"><code>&quot;\U0001f602&quot;</code></td><td align="left"><code>😂</code></td></tr></tbody></table><p>在字符串前加 <code>r</code> 或 <code>R</code>，可禁用转义（反斜杠视为普通字符）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;Hello\nWorld&quot;</span>)  <span class="comment"># 输出 `Hello\nWorld`（不换行）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello\nWorld&quot;</span>)   <span class="comment"># 输出换行后的结果，即 world</span></span><br></pre></td></tr></table></figure><h3 id="十、等待用户输入"><a href="#十、等待用户输入" class="headerlink" title="十、等待用户输入"></a><strong>十、等待用户输入</strong></h3><p><code>input()</code> 是 Python 中用于从<strong>标准输入</strong>(通常是键盘)中<strong>获取用户输入</strong>的内置函数。<br><code>input()</code> 函数会：</p><ul><li>暂停程序执行</li><li>等待用户在终端&#x2F;命令行中输入内容</li><li>用户输入后按回车键确认</li><li>将输入的内容作为字符串返回（不包括最后的换行符）</li></ul><p>实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&quot;\n\n按下 enter 键后退出。&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上代码中 ，<code>\n\n</code> 在结果输出前会输出两个新的空行。一旦用户按下 <strong>enter</strong> 键时，程序将<strong>退出</strong>。</p><h3 id="十一、同一行显示多条语句"><a href="#十一、同一行显示多条语句" class="headerlink" title="十一、同一行显示多条语句"></a><strong>十一、同一行显示多条语句</strong></h3><p>Python 可以在同一行中使用<strong>多条语句</strong>，语句之间使用分号 <code>;</code> 分割，以下是一个简单的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;hello&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>) <span class="comment">#sys.stdout.write()函数用以统计括号内字符串的数量</span></span><br></pre></td></tr></table></figure><h3 id="十二、多个语句构成代码组"><a href="#十二、多个语句构成代码组" class="headerlink" title="十二、多个语句构成代码组"></a><strong>十二、多个语句构成代码组</strong></h3><p><strong>缩进相同</strong>的一组语句构成一个<strong>代码块</strong>，我们称之为<strong>代码组</strong>。</p><p>像if、while、def和class这样的<strong>复合语句</strong>，<strong>首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组</strong>。</p><p>我们将首行及后面的代码组称为一个<strong>子句</strong>(clause)。</p><p>如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line"><span class="keyword">elif</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure><h3 id="十三、print-输出"><a href="#十三、print-输出" class="headerlink" title="十三、print 输出"></a><strong>十三、print 输出</strong></h3><p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end&#x3D;””：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x )</span><br><span class="line"><span class="built_in">print</span>( y )</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">---------</span><br><span class="line">a b</span><br></pre></td></tr></table></figure><h3 id="十四、import-与-from…import"><a href="#十四、import-与-from…import" class="headerlink" title="十四、import 与 from…import"></a><strong>十四、import 与 from…import</strong></h3><p>在 python 用 import 或者 from…import 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： import somemodule</p><p>从某个模块中导入某个函数,格式为： from somemodule import somefunction</p><p>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</p><p>将某个模块中的全部函数导入，格式为： from somemodule import *</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;================Python import mode==========================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;命令行参数为:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n python 路径为&#x27;</span>,sys.path)</span><br></pre></td></tr></table></figure><h3 id="十五、命令行参数"><a href="#十五、命令行参数" class="headerlink" title="十五、命令行参数"></a><strong>十五、命令行参数</strong></h3><p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python -h</span><br><span class="line">usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...</span><br><span class="line">Options <span class="keyword">and</span> arguments (<span class="keyword">and</span> corresponding environment variables):</span><br><span class="line">-c cmd : program passed <span class="keyword">in</span> <span class="keyword">as</span> string (terminates option <span class="built_in">list</span>)</span><br><span class="line">-d     : debug output <span class="keyword">from</span> parser (also PYTHONDEBUG=x)</span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH)</span><br><span class="line">-h     : <span class="built_in">print</span> this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br><span class="line"></span><br><span class="line">[ etc. ]</span><br></pre></td></tr></table></figure><p>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 <a href="https://www.runoob.com/python3/python3-command-line-arguments.html">Python 3 命令行参数</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 教程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>引导</title>
      
      <link href="/2025/04/19/%E5%BC%95%E5%AF%BC/"/>
      <url>/2025/04/19/%E5%BC%95%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="你好，"><a href="#你好，" class="headerlink" title="你好，"></a>你好，</h1><p>欢迎来到Lnterlink的小屋！</p><p>Lnterlink本意为“联系”<del>，不是Interlink！</del></p><p>建立本站的目的是学习与记录相关技术，分享心得与体会</p><h2 id="愿作一切美好的信使"><a href="#愿作一切美好的信使" class="headerlink" title="愿作一切美好的信使"></a>愿作一切美好的信使</h2><p>附带 <a href="https://github.com/fomalhaut1998/hexo-theme-Fomalhaut/blob/main/source/_posts/2022-08-09-Markdown%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E5%86%99%E6%B3%95%E6%B1%87%E6%80%BB.md">MarkDown学习链接</a> <a href="https://blog.csdn.net/u014061630/article/details/81359144">CSDN参考教程</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
