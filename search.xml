<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      
        <title>新闻学概论（一）新闻学：历史、理论与知识体系</title>
      
      <link href="/2025/04/25/%E6%96%B0%E9%97%BB%E5%AD%A6%E6%A6%82%E8%AE%BA%EF%BC%88%E4%B8%80%EF%BC%89%20%E4%B8%AD%E5%A4%96%E6%96%B0%E9%97%BB%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
      <url>/2025/04/25/%E6%96%B0%E9%97%BB%E5%AD%A6%E6%A6%82%E8%AE%BA%EF%BC%88%E4%B8%80%EF%BC%89%20%E4%B8%AD%E5%A4%96%E6%96%B0%E9%97%BB%E5%8F%91%E5%B1%95%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="新闻学概论（一）新闻学：历史、理论与知识体系"><a href="#新闻学概论（一）新闻学：历史、理论与知识体系" class="headerlink" title="新闻学概论（一）新闻学：历史、理论与知识体系"></a>新闻学概论（一）新闻学：历史、理论与知识体系</h1><hr><blockquote><p>指导教材***《新闻学概论》（马工程）***</p></blockquote><h2 id="新闻学的发展历史"><a href="#新闻学的发展历史" class="headerlink" title="新闻学的发展历史"></a>新闻学的发展历史</h2><h3 id="一、思考的问题"><a href="#一、思考的问题" class="headerlink" title="一、思考的问题"></a><strong>一、思考的问题</strong></h3><ul><li>在发生重大突发事件时，你是否想要获知该事件的状况和进展?</li><li>你可以从哪些渠道(媒介)获取关于该事件的进展?</li><li>你如何相信你获得的信息是符合实际情况(现实)的?</li><li>除了重大突发事件，你还关心哪些类型的信息?</li><li>在日常生活中，你认为哪些信息是至关重要的?</li><li>你能够准确分辨日常生活中这些信息的边界吗?</li><li>你知道这些信息背后是怎么产生(生产)出来的吗?</li></ul><p>如果你能回答这些问题，说明你已经对新闻有了最基本的概念。事实上，新闻已经存在于我们的生活之中了。</p><hr><h3 id="二、全球新闻学的发展历史"><a href="#二、全球新闻学的发展历史" class="headerlink" title="二、全球新闻学的发展历史"></a><strong>二、全球新闻学的发展历史</strong></h3><p><strong>1.新闻学研究的早期阶段</strong></p><p>1690年 德国人托比阿斯发表**《论出版自由》<strong>，首次出现</strong>新闻价值**的概念</p><p> 17-19世纪，约翰.弥尔顿、约翰.洛克、马、恩等思想家都讨论过报刊、新闻、舆论等问题</p><p>1845年，普尔兹**《德国新闻事业史》**出版</p><hr><p><strong>2.中期阶段 大众化阶段</strong></p><p>新闻学研究的时代背景——十九世纪上半叶大众化新闻业的发展：</p><p>出现便士报、通讯社、商业化、大众化等特征，新闻报刊上出现广告等<strong>二次售卖</strong>环节，<strong>大众化</strong>是现代新闻业得以发展的重要标志</p><hr><p><strong>3.新闻学研究的真正起步阶段</strong> ——新闻活动激增、大学教育开展</p><p>19世纪末，形成新闻学，其标志是大学开设新闻学课程。最早在<strong>德国和瑞士</strong>的一些大学设立专科。</p><p>1916年，<strong>莱比锡新闻研究所</strong>成立</p><p><strong>世界上第一所新闻学院</strong>：1908年，<strong>美国密苏里大学新闻学院</strong>。创始人为沃尔特.威廉，创立《记者守则》。曾访问中国申报馆。</p><p>最早的一批新闻学著作： 1899年松本君平《新闻学》；1903年休曼《实用新闻学》；1924约斯特《新闻学原理》。</p><p>同时，一大波学科随新闻学发展起来，如<strong>传播学、广告学</strong>等</p><hr><p><strong>4.现代新闻学发展</strong></p><p>2004年，德国艾尔福特发起“<strong>全球化时代的新闻学研究</strong>”国际会议</p><hr><h3 id="三、中国新闻学的发展历史"><a href="#三、中国新闻学的发展历史" class="headerlink" title="三、中国新闻学的发展历史"></a><strong>三、中国新闻学的发展历史</strong></h3><p><strong>1.中国新闻学研究的萌芽阶段</strong></p><p>**《外国文史》**中对新闻的论述181个字，<strong>第一篇</strong>在中国出现的关于新闻学的论述</p><p>据考证，1834年普鲁士教士在**《东西洋考每月统纪传》<strong>第三期，发表</strong>《新闻纸概论》<strong>，这是</strong>第二篇**中文出版方面的现代文章 </p><hr><p><strong>2.中国新闻学研究的政治传统</strong> <em>强调新闻的耳目、喉舌功能</em></p><p>1876年，王韬在《循环日报》中发表《论日报渐行于中土》，文中对“泰西日报”推崇备至</p><p>19世纪下半叶，关于现代新闻报刊讨论开始增多，比较突出的参与人群是清廷大臣、口岸知识分子、传教士</p><p>李秀云教授认为，1834年到1899年各报刊发表的论述新闻学的文章，申报占8篇，万国公报占12篇</p><p>1896年后，梁启超关于报刊与政治、报刊与舆论、初版自由、第四种族等论述，逐渐形成了“改良”、“启蒙”等新闻学方面较为系统的论述</p><p>当时的俄国，也同样处于新闻事业发展的历史错位中，政党报刊借解放农奴运动兴盛</p><p>中国共产党也学习了俄国的传统，借助新闻传播革命思想</p><hr><p><strong>3.中国新闻学教育的开端</strong></p><p>1918年10月，北京大学新闻学研究会成立，标志着中国新闻学的形成，也是中国新闻教育的开端。</p><p>徐宝璜（中国第一本新闻学著作《新闻学》的作者）、邵飘萍（马列传播先驱之一、“铁肩担道义，辣手著文章”，著作《实际应用新闻学》《新闻学总论》各偏重业务、理论）等人主讲。</p><p>1818-1819年毛泽东作为北大新闻学研究会会员</p><hr><p><strong>4.新闻学理论内核的成型：党报理论</strong></p><p> 鉴于抗日战争和陕甘宁边区的环境特点和工作需要，1942年延安《解放日报》在毛泽东的领导下改版，中共的<strong>党报理论</strong>成型，包括：</p><ol><li>党报的<strong>基本任务</strong>是宣传党的政治方针政策方案（党性原则、党管媒体）；</li><li>党报的<strong>基本内容</strong>是正面宣传为主；</li><li>党报具有鲜明的<strong>阶级性</strong>，体现人民性（为人民服务）</li><li>无产阶级的新闻事业与资产阶级新闻事业有着<strong>根本区别</strong></li></ol><p>伴随着改版，《解放日报》发表一系列社论（包括以上观点）。</p><p>其中最具理论色彩的，便是1943年9月1日<strong>陆定一</strong>发表的文章**《我们对于新闻学的基本观点》**</p><hr><p><strong>党报理论与新闻学自主知识体系</strong>:以毛泽东同志为代表的中国共产党领导人的新闻思想，</p><p>以及<strong>张友渔、陆定一、胡乔木、范长江</strong>等人的新闻学观点，对于新闻学知识体系的发展尤其是此后中国新闻学自主知识体系的构建具有重要的意义</p><p><strong>党报理论的知识起点</strong>:首先是从“新闻是什么”加以讨论的，以界定新闻学的<strong>元问题</strong>为基础的、对中国新闻学元问题做出了<strong>辩证唯物主义</strong>的阐释。</p><p> <strong>知识的建构逻辑</strong>:与此前新闻学中关于“新闻”的<strong>经验主义诠释</strong>不同，</p><p>陆定一采用的是<strong>演绎的逻辑</strong>，即运用<strong>辩证唯物主义</strong>的一般原理来理解和界定新闻和新闻活动。(新闻的定义：<strong>新闻是新近发生的事实的报道</strong>。）</p><p><strong>作为实践的新闻学知识</strong>:将新闻事业放置在党和国家的整体事业中加以定位，强调新闻的目的在于为更大的政治与社会目标服务，新闻学知识应该观照国家与社会发展。</p><p><strong>承认知识的意识形态属性</strong>:党的新闻事业不是脱离于整体事业的，而是革命和建设事业的重要组成部分;</p><p>只有为人民服务的报纸，与人民有密切联系的报纸，才能得到真实的新闻;即新闻工作要为更大的政治实践服务，为中国的现代化进程(包括国家的现代化和人的现代化)服务。</p><hr><p><strong>黄天鹏</strong>，在20世纪30年代组织编辑出版了30多种新闻学书籍，多为整理总结。</p><p>新中国成立之后，新闻学研究的范式发生了转化，马克思主义的新闻学范式占据主导。1952年底，全国新闻出版业和广播电台完成国有化改造，所有传媒成为各级党政机关的一部分，<strong>新闻事业作为党和国家建设的构成部分</strong>。</p><hr><p><strong>5.改革开放后国内的新闻学研究</strong></p><p>建国以后第一本新闻理论的著作：<strong>甘惜分</strong>（1916-2016）先生的**《新闻理论基础》**，于1982年内部印刷出版</p><p>1981年，复旦<strong>王中</strong>先生在《新闻大学》上连续发表多篇文章，对过去的一些新闻观点进行了讨论</p><p>甘惜分先生的新闻学知识建构:<strong>从《新闻理论基础》到《新闻学原理纲要》</strong>，建构理论体系的起点是马列主义新闻论著中着重解决的两个问题;知识结构上的变化外，还有诸如信息、新闻媒介、新闻控制、受众等新概念被引入到新闻理论体系中。一内核是马克思主义的立场、观点和方法论(辩证唯物主义)，理论的起点是新闻事实，贯穿理论体系的“红线”是新闻事业，而在价值论上则是新闻的**“倾向论”**。</p><p>王中先生的新闻学知识建构**:从《新闻学原理大纲》到《论新闻》《论传播工具》《论宣传》《论新闻事业的阶级性》<strong>等，报纸商品性、读者需求论、社会需求论等问题的阐发，同样采用的</strong>辩证唯物主义**的方法，“只有从社会的客观存在中去寻找答案”，“历史唯物主义是一把钥匙”。</p><p><strong>20世纪末的二十年间</strong>，正是在甘、王等一代学者的辛勤探索和引领下，一批新闻学者迅速成长起来，</p><p>他们著书立说、守正创新，在新闻学理论研究上各展其长，基本形成中国特色新闻学知识体系的主体框架，中国的新闻理论研究和新闻学知识面貌才迎来了一个新的局面。</p><blockquote><p>甘惜分谈到《新闻理论基础》是思想解放的结果，体系是独创的，可以说是具有中国特色的新闻理论，不同于外国同类的书，也不同于中国以往的新闻理论。</p></blockquote><blockquote><p>甘惜分把他的思想发展总结为三个时期，但以马克思主义作为指导思想，建设中国自己的新闻学，这个思想一直都没有变化。–<strong>“立足中国土，回到马克思”</strong></p></blockquote><hr><p><strong>历史自觉、理论自觉、体系自觉、科学自觉</strong>:一代学者自觉到历史的重任，既要总结和吸取历史的经验教训，更要为中国的学术和理论作出开拓性的贡献。</p><p>改革开放以来，拥有丰富的新闻工作经验并仍活跃在新闻实践一线的新闻工作者、管理者，参与到理论研究中。在现代化建设背景下，新闻一线的实践带来了丰富的素材，为知识探索提供了依据。</p><p><strong>安岗、郭超人、穆青、艾丰、杨伟光、梁衡</strong>等学者一个接一个为新闻学事业添砖加瓦</p><p>1982年<strong>安岗</strong>就提出，新闻研究要赶快抢救新闻史料等六个方面的问题，</p><p>“要把目前从事新闻实践的同志都吸引到研究工作上来，把他们长期积累的工作经验上升为理论”;</p><p><strong>穆青</strong>就<strong>世界性通讯社</strong>的标准、中国的特征等问题作出了理论上的阐述;</p><p><strong>艾丰</strong>形成了关于新闻采访的学理性观点;</p><p><strong>梁衡</strong>在多年的新闻实践和思考中，提出报纸的<strong>四个属性</strong>(信息属性、政治属性、文化属性和商品属性)、报纸市场的<strong>三个阶段</strong>、新闻与文学的<strong>本质区别</strong>等学术观点;</p><p>中国的新闻学者们很早就意识到了知识的体系性不足这一重要问题，学者们具有构建新闻理论体系的自觉意识</p><p><strong>《宏观新闻学》</strong>（1991年）、<strong>《现代新闻理论》</strong>（1998年）尝试构建成体系的新闻理论结构，</p><p>提出“从概念到原理，从知识要素到理论范畴的论证都需要建立现代的科学抽象体系”;</p><p><strong>《新闻学基本原理》</strong>（1993年），是较早采用传播的过程论述和分析新闻现象的一本著作，</p><p>“如果我们把新闻传播看成是一个大的系统的话，那么，在这个大的系统中，各组成部分既有自身规律，同时又有着相关性”</p><hr><p><strong>6.改开后，新闻学研究“重启”且传播学的输入</strong></p><p>1957年，复旦大学新闻系在翻译**《美国报纸的职能》**中首次出现了<code>mass communication</code>的引文，郑北渭翻译为“群众思想交通”</p><p>1978-1979年，开始正式<strong>翻译介绍</strong>传播学</p><p>1982年，<strong>中国社会科学院新闻研究所</strong>在北京倡议召开了第一次<strong>传播学研究会</strong></p><p>1982年，传播学者<strong>施拉姆</strong>访问北上广三市传播机构</p><hr><p><strong>发展历程</strong></p><blockquote><ol><li>西方新闻学知识的引入</li><li>政党报刊实践与新闻启蒙</li><li>中国新闻学创立并初步发展</li><li>马克思主义新闻学的引入</li><li>当代中国新闻学（新闻理论)的奠定</li><li>改革开放后的发展</li></ol></blockquote><h3 id="四、宏观背景补充"><a href="#四、宏观背景补充" class="headerlink" title="四、宏观背景补充"></a><strong>四、宏观背景补充</strong></h3><p><strong>1.新闻学研究和教育发展（1984-1992）</strong></p><ul><li><p>关于世界新技术革命的“热”起来，《第三次浪潮》《大趋势》等使人们的兴奋点重新转向了文化问题。</p></li><li><p>同时报业大发展，以党报为核心的多层次、多样化的报纸结构形成。比较集中讨论新闻改革。</p></li></ul><p><strong>2.新闻学研究的新时期（1992-至今）</strong></p><ul><li>市场经济改革、全球化、新技术革命等背景，党和国家对于新闻工作越来越重视，新闻传媒行业的繁荣。</li><li>新闻学的学术话语体系逐渐成型，在保持传统的同时，新闻学研究更看重学术化和研究的规范化，出现了一批学术化的成果。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      
        <title>影视后期合成技术&#92;:AE入门（一）</title>
      
      <link href="/2025/04/21/%E5%BD%B1%E8%A7%86%E5%90%8E%E6%9C%9F%E5%90%88%E6%88%90%E6%8A%80%E6%9C%AFAE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/04/21/%E5%BD%B1%E8%A7%86%E5%90%8E%E6%9C%9F%E5%90%88%E6%88%90%E6%8A%80%E6%9C%AFAE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      
        <title>Python基础入门（一）基础概念及语法</title>
      
      <link href="/2025/04/21/Python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/04/21/Python%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Python基础入门（一）基础概念及语法"><a href="#Python基础入门（一）基础概念及语法" class="headerlink" title="Python基础入门（一）基础概念及语法"></a>Python基础入门（一）基础概念及语法</h2><hr><h3 id="一、编码"><a href="#一、编码" class="headerlink" title="一、编码"></a><strong>一、编码</strong></h3><p>python3.X的源码文件使用<strong>UTF-8</strong>进行编码，所有的字符串都是<strong>unicode</strong>字符串。</p><p><em>UTF-8是unicode字符集中的一种，支持中文、日文、拉丁语种等，这意味着你可以在python3.X程序中部分使用中文标识，尽管这是不被推荐的。</em></p><h3 id="二、标识符"><a href="#二、标识符" class="headerlink" title="二、标识符"></a><strong>二、标识符</strong></h3><p><strong>标识符（identifier）即用于标识</strong>变量、函数、类、模块等<strong>程序元素</strong>的名称，标识符是程序员自定义的名称。</p><p>标识符的使用需要遵守如下规则：</p><ul><li><strong>第一个字符</strong>必须以<strong>字母（a-z, A-Z）或</strong>下划线 _ 。</li><li>标识符的<strong>其他的部分</strong>由<strong>字母、数字和下划线</strong>组成。</li><li>标识符对<strong>大小写敏感</strong>，count 和 Count 是不同的标识符。</li><li>标识符对<strong>长度无硬性限制</strong>，但建议保持简洁（一般不超过 20 个字符）。</li><li><strong>禁止使用保留关键字</strong>（<em>keyword</em>），如 if、for、class 等不能作为标识符。</li></ul><p><strong>合法标识符：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">user_name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">_total = <span class="number">100</span></span><br><span class="line">MAX_SIZE = <span class="number">1024</span></span><br><span class="line">calculate_area()</span><br><span class="line">StudentInfo</span><br><span class="line">__private_var</span><br><span class="line">姓名 = <span class="string">&quot;张三&quot;</span>   <span class="comment"># 在python3合法</span></span><br><span class="line">π = <span class="number">3.14159</span>    <span class="comment"># 在python3合法</span></span><br></pre></td></tr></table></figure><p><strong>非法标识符：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2nd_place = <span class="string">&quot;silver&quot;</span>    <span class="comment"># 错误：以数字开头</span></span><br><span class="line">user-name = <span class="string">&quot;Bob&quot;</span>       <span class="comment"># 错误：包含连字符</span></span><br><span class="line"><span class="keyword">class</span> = <span class="string">&quot;Math&quot;</span>          <span class="comment"># 错误：使用关键字</span></span><br><span class="line">$price = <span class="number">9.99</span>          <span class="comment"># 错误：包含特殊字符</span></span><br><span class="line"><span class="keyword">for</span> = <span class="string">&quot;loop&quot;</span>           <span class="comment"># 错误：使用关键字</span></span><br></pre></td></tr></table></figure><h3 id="三、保留字（即关键字keyword）"><a href="#三、保留字（即关键字keyword）" class="headerlink" title="三、保留字（即关键字keyword）"></a><strong>三、保留字（即关键字keyword）</strong></h3><p><strong>保留字</strong>即<strong>关键字</strong><em>keyword</em>，我们<strong>不能</strong>把它们用作<strong>任何标识符名称</strong>。Python 的<strong>标准库</strong>提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><p><em>标准库即自带的库，无需手动下载</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>类别</strong></th><th align="left"><strong>关键字</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left"><strong>逻辑值</strong></td><td align="left"><code>True</code></td><td align="left">布尔真值</td></tr><tr><td align="left"></td><td align="left"><code>False</code></td><td align="left">布尔假值</td></tr><tr><td align="left"></td><td align="left"><code>None</code></td><td align="left">表示空值或无值</td></tr><tr><td align="left"><strong>逻辑运算</strong></td><td align="left"><code>and</code></td><td align="left">逻辑与运算</td></tr><tr><td align="left"></td><td align="left"><code>or</code></td><td align="left">逻辑或运算</td></tr><tr><td align="left"></td><td align="left"><code>not</code></td><td align="left">逻辑非运算</td></tr><tr><td align="left"><strong>条件控制</strong></td><td align="left"><code>if</code></td><td align="left">条件判断语句</td></tr><tr><td align="left"></td><td align="left"><code>elif</code></td><td align="left">否则如果（else if 的缩写）</td></tr><tr><td align="left"></td><td align="left"><code>else</code></td><td align="left">否则分支</td></tr><tr><td align="left"><strong>循环控制</strong></td><td align="left"><code>for</code></td><td align="left">迭代循环</td></tr><tr><td align="left"></td><td align="left"><code>while</code></td><td align="left">条件循环</td></tr><tr><td align="left"></td><td align="left"><code>break</code></td><td align="left">跳出循环</td></tr><tr><td align="left"></td><td align="left"><code>continue</code></td><td align="left">跳过当前循环的剩余部分，进入下一次迭代</td></tr><tr><td align="left"><strong>异常处理</strong></td><td align="left"><code>try</code></td><td align="left">尝试执行代码块</td></tr><tr><td align="left"></td><td align="left"><code>except</code></td><td align="left">捕获异常</td></tr><tr><td align="left"></td><td align="left"><code>finally</code></td><td align="left">无论是否发生异常都会执行的代码块</td></tr><tr><td align="left"></td><td align="left"><code>raise</code></td><td align="left">抛出异常</td></tr><tr><td align="left"><strong>函数定义</strong></td><td align="left"><code>def</code></td><td align="left">定义函数</td></tr><tr><td align="left"></td><td align="left"><code>return</code></td><td align="left">从函数返回值</td></tr><tr><td align="left"></td><td align="left"><code>lambda</code></td><td align="left">创建匿名函数</td></tr><tr><td align="left"><strong>类与对象</strong></td><td align="left"><code>class</code></td><td align="left">定义类</td></tr><tr><td align="left"></td><td align="left"><code>del</code></td><td align="left">删除对象引用</td></tr><tr><td align="left"><strong>模块导入</strong></td><td align="left"><code>import</code></td><td align="left">导入模块</td></tr><tr><td align="left"></td><td align="left"><code>from</code></td><td align="left">从模块导入特定部分</td></tr><tr><td align="left"></td><td align="left"><code>as</code></td><td align="left">为导入的模块或对象创建别名</td></tr><tr><td align="left"><strong>作用域</strong></td><td align="left"><code>global</code></td><td align="left">声明全局变量</td></tr><tr><td align="left"></td><td align="left"><code>nonlocal</code></td><td align="left">声明非局部变量（用于嵌套函数）</td></tr><tr><td align="left"><strong>异步编程</strong></td><td align="left"><code>async</code></td><td align="left">声明异步函数</td></tr><tr><td align="left"></td><td align="left"><code>await</code></td><td align="left">等待异步操作完成</td></tr><tr><td align="left"><strong>其他</strong></td><td align="left"><code>assert</code></td><td align="left">断言，用于测试条件是否为真</td></tr><tr><td align="left"></td><td align="left"><code>in</code></td><td align="left">检查成员关系</td></tr><tr><td align="left"></td><td align="left"><code>is</code></td><td align="left">检查对象身份（是否是同一个对象）</td></tr><tr><td align="left"></td><td align="left"><code>pass</code></td><td align="left">空语句，用于占位</td></tr><tr><td align="left"></td><td align="left"><code>with</code></td><td align="left">上下文管理器，用于资源管理</td></tr><tr><td align="left"></td><td align="left"><code>yield</code></td><td align="left">从生成器函数返回值</td></tr></tbody></table><h3 id="四、注释"><a href="#四、注释" class="headerlink" title="四、注释"></a><strong>四、注释</strong></h3><p>1.Python中<strong>单行注释</strong>以 <strong>#</strong> 开头，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello, Python!&quot;</span>) <span class="comment"># 第二个注释</span></span><br></pre></td></tr></table></figure><p>输出结果为：<code>Hello，Python</code></p><p>2.<strong>多行注释</strong>可以用<strong>多个 # 号</strong>，还有 <strong>‘’’ 和 “””</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第三注释</span></span><br><span class="line"><span class="string">第四注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第五注释</span></span><br><span class="line"><span class="string">第六注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello, Python!&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果为：<code>Hello，Python</code></p><p>3.<strong>释放</strong>注释和多行注释：</p><p>选中注释行代码，使用<code>Ctrl+/</code>快捷键即可，注意是<code>斜杠/</code>不是<code>反斜杠\</code></p><h3 id="五、行与缩进"><a href="#五、行与缩进" class="headerlink" title="五、行与缩进"></a><strong>五、行与缩进</strong></h3><p>python最具特色的就是使用<strong>缩进</strong>来表示<strong>代码块</strong>，不需要使用大括号 <code>&#123;&#125;</code> 。</p><p>缩进的<strong>空格数</strong>是<strong>可变的</strong>，但是同一个代码块的语句必须包含<strong>相同的缩进空格数</strong>。<em>为了方便使用和审阅，一般以<strong>4个空格</strong>为一组来使用。</em></p><p>实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="六、多行语句"><a href="#六、多行语句" class="headerlink" title="六、多行语句"></a><strong>六、多行语句</strong></h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用<strong>反斜杠 <code>\</code></strong> 来实现多行语句，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">item_one = <span class="number">1</span></span><br><span class="line">item_two = <span class="number">2</span></span><br><span class="line">item_three = <span class="number">3</span></span><br><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br><span class="line"><span class="built_in">print</span>(total) <span class="comment"># 输出为 6</span></span><br></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，<strong>不需要使用反斜杠 \</strong>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="七、数字-Number-类型"><a href="#七、数字-Number-类型" class="headerlink" title="七、数字(Number)类型"></a><strong>七、数字(Number)类型</strong></h3><p>python中数字有四种类型：<strong>整数、布尔型、浮点数和复数</strong>。</p><ul><li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li><strong>bool</strong> (布尔), 如 True。</li><li><strong>float</strong> (浮点数), 如 1.23、3E-2</li><li><strong>complex</strong> (复数) - 复数由实部和虚部组成，形式为 a + bj，其中 a 是实部，b 是虚部，j 表示虚数单位。如 1 + 2j、 1.1 + 2.2j</li></ul><h3 id="八、字符串-String-相关"><a href="#八、字符串-String-相关" class="headerlink" title="八、字符串(String)相关"></a><strong>八、字符串(String)相关</strong></h3><p>在 Python3 中，<strong>字符串（String）</strong> 是一个<strong>不可变</strong>（immutable）的序列类型，用于表示文本数据。</p><ul><li>Python 中单引号 <code>&#39;</code> 和双引号 <code>&quot;</code> 使用完全相同。</li><li>使用三引号(‘’’ 或 “””)可以指定一个<strong>多行字符串</strong>。</li><li>转义符 <code>\</code>。</li><li>反斜杠<code>\</code>可以用来转义，使用 r 可以让反斜杠不发生转义。 如 <strong>r”this is a line with \n”</strong> 则 \n 会显示，并不是换行。</li><li>按字面意义级联字符串，如 <strong>“this “ “is “ “string”</strong> 会被自动转换为 <strong>this is string</strong>。</li><li>字符串可以用 <code>+</code> 运算符连接在一起，用 <code>*</code> 运算符重复。</li><li>Python 中的字符串有两种<strong>索引方式</strong>，<strong>从左往右以 0 开始</strong>，<strong>从右往左以 -1 开始</strong>。</li><li>Python 中的字符串不能改变。</li><li>Python 没有单独的字符类型，<strong>一个字符就是长度为 1 的字符串</strong>。</li><li>字符串切片 <code>str[start:end]</code>，其中 **start（包含）**是切片开始的索引，**end（不包含）**是切片结束的索引。</li><li>字符串的切片可以加上<strong>步长参数 step</strong>，语法格式如下：<code>str[start:end:step]</code></li></ul><p>实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)                 <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第六个的字符（不包含）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])          <span class="comment"># 输出从第二个开始到第五个且每隔一个的字符（步长为2）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&#x27;你好&#x27;</span>)         <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\nworld&#x27;</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nworld&#x27;</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456789</span></span><br><span class="line"><span class="number">12345678</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">345</span></span><br><span class="line"><span class="number">3456789</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">123456789123456789</span></span><br><span class="line"><span class="number">123456789</span>你好</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">hello\nworld</span><br></pre></td></tr></table></figure><p>上面的 r 指 raw，即 raw string，会自动将反斜杠转义，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)       <span class="comment"># 输出空行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;\n&#x27;</span>)      <span class="comment"># 输出 \n</span></span><br></pre></td></tr></table></figure><h3 id="九、转义"><a href="#九、转义" class="headerlink" title="九、转义"></a><strong>九、转义</strong></h3><p>在编程和文本处理中，<strong>转义字符（Escape Character）</strong> 是一个特殊符号，通常以反斜杠 <code>\</code> 开头，用于表示那些<strong>无法直接输入或具有特殊含义</strong>的字符。它的核心作用是“转义”——即<strong>改变</strong>后续字符的<strong>原始含义</strong>。</p><p>以下是 Python 中常用的转义字符：</p><table><thead><tr><th align="left">转义序列</th><th align="left">含义</th><th align="left">示例</th><th align="left">输出结果</th></tr></thead><tbody><tr><td align="left"><code>\\</code></td><td align="left">表示反斜杠本身</td><td align="left"><code>&quot;C:\\path&quot;</code></td><td align="left"><code>C:\path</code></td></tr><tr><td align="left"><code>\&#39;</code></td><td align="left">单引号</td><td align="left"><code>&#39;It\&#39;s me&#39;</code></td><td align="left"><code>It&#39;s me</code></td></tr><tr><td align="left"><code>\&quot;</code></td><td align="left">双引号</td><td align="left"><code>&quot;他说：\&quot;你好\&quot;&quot;</code></td><td align="left"><code>他说：&quot;你好&quot;</code></td></tr><tr><td align="left"><code>\n</code></td><td align="left">换行符</td><td align="left"><code>&quot;Hello\nWorld&quot;</code></td><td align="left"><code>Hello</code>（换行）<code>World</code></td></tr><tr><td align="left"><code>\t</code></td><td align="left">制表符（Tab空格）</td><td align="left"><code>&quot;Name:\tAlice&quot;</code></td><td align="left"><code>Name:   Alice</code></td></tr><tr><td align="left"><code>\r</code></td><td align="left">回车符（光标回到行首）</td><td align="left"><code>&quot;Hello\rWorld&quot;</code></td><td align="left"><code>World</code>（覆盖Hello）</td></tr><tr><td align="left"><code>\b</code></td><td align="left">退格符</td><td align="left"><code>&quot;Hel\blo&quot;</code></td><td align="left"><code>Helo</code>（删除前一个字符）</td></tr><tr><td align="left"><code>\uxxxx</code></td><td align="left">Unicode 码点（4位十六进制）</td><td align="left"><code>&quot;\u4e2d&quot;</code></td><td align="left"><code>中</code></td></tr><tr><td align="left"><code>\Uxxxxxxxx</code></td><td align="left">Unicode 码点（8位十六进制）</td><td align="left"><code>&quot;\U0001f602&quot;</code></td><td align="left"><code>😂</code></td></tr></tbody></table><p>在字符串前加 <code>r</code> 或 <code>R</code>，可禁用转义（反斜杠视为普通字符）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;Hello\nWorld&quot;</span>)  <span class="comment"># 输出 `Hello\nWorld`（不换行）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello\nWorld&quot;</span>)   <span class="comment"># 输出换行后的结果，即 world</span></span><br></pre></td></tr></table></figure><h3 id="十、等待用户输入"><a href="#十、等待用户输入" class="headerlink" title="十、等待用户输入"></a><strong>十、等待用户输入</strong></h3><p><code>input()</code> 是 Python 中用于从<strong>标准输入</strong>(通常是键盘)中<strong>获取用户输入</strong>的内置函数。<br><code>input()</code> 函数会：</p><ul><li>暂停程序执行</li><li>等待用户在终端&#x2F;命令行中输入内容</li><li>用户输入后按回车键确认</li><li>将输入的内容作为字符串返回（不包括最后的换行符）</li></ul><p>实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>(<span class="string">&quot;\n\n按下 enter 键后退出。&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上代码中 ，<code>\n\n</code> 在结果输出前会输出两个新的空行。一旦用户按下 <strong>enter</strong> 键时，程序将<strong>退出</strong>。</p><h3 id="十一、同一行显示多条语句"><a href="#十一、同一行显示多条语句" class="headerlink" title="十一、同一行显示多条语句"></a><strong>十一、同一行显示多条语句</strong></h3><p>Python 可以在同一行中使用<strong>多条语句</strong>，语句之间使用分号 <code>;</code> 分割，以下是一个简单的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;hello&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>) <span class="comment">#sys.stdout.write()函数用以统计括号内字符串的数量</span></span><br></pre></td></tr></table></figure><h3 id="十二、多个语句构成代码组"><a href="#十二、多个语句构成代码组" class="headerlink" title="十二、多个语句构成代码组"></a><strong>十二、多个语句构成代码组</strong></h3><p><strong>缩进相同</strong>的一组语句构成一个<strong>代码块</strong>，我们称之为<strong>代码组</strong>。</p><p>像if、while、def和class这样的<strong>复合语句</strong>，<strong>首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组</strong>。</p><p>我们将首行及后面的代码组称为一个<strong>子句</strong>(clause)。</p><p>如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line"><span class="keyword">elif</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure><h3 id="十三、print-输出"><a href="#十三、print-输出" class="headerlink" title="十三、print 输出"></a><strong>十三、print 输出</strong></h3><p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end&#x3D;””：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x )</span><br><span class="line"><span class="built_in">print</span>( y )</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">---------</span><br><span class="line">a b</span><br></pre></td></tr></table></figure><h3 id="十四、import-与-from…import"><a href="#十四、import-与-from…import" class="headerlink" title="十四、import 与 from…import"></a><strong>十四、import 与 from…import</strong></h3><p>在 python 用 import 或者 from…import 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： import somemodule</p><p>从某个模块中导入某个函数,格式为： from somemodule import somefunction</p><p>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</p><p>将某个模块中的全部函数导入，格式为： from somemodule import *</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;================Python import mode==========================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;命令行参数为:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n python 路径为&#x27;</span>,sys.path)</span><br></pre></td></tr></table></figure><h3 id="十五、命令行参数"><a href="#十五、命令行参数" class="headerlink" title="十五、命令行参数"></a><strong>十五、命令行参数</strong></h3><p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python -h</span><br><span class="line">usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...</span><br><span class="line">Options <span class="keyword">and</span> arguments (<span class="keyword">and</span> corresponding environment variables):</span><br><span class="line">-c cmd : program passed <span class="keyword">in</span> <span class="keyword">as</span> string (terminates option <span class="built_in">list</span>)</span><br><span class="line">-d     : debug output <span class="keyword">from</span> parser (also PYTHONDEBUG=x)</span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH)</span><br><span class="line">-h     : <span class="built_in">print</span> this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br><span class="line"></span><br><span class="line">[ etc. ]</span><br></pre></td></tr></table></figure><p>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 <a href="https://www.runoob.com/python3/python3-command-line-arguments.html">Python 3 命令行参数</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      
        <title>引导</title>
      
      <link href="/2025/04/19/%E5%BC%95%E5%AF%BC/"/>
      <url>/2025/04/19/%E5%BC%95%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎来到Lnterlink的小屋！<br>Lnterlink本意为“联系”<br>建立本站的目的是学习与记录相关技术，分享心得与体会</p><h2 id="愿作一切美好的信使"><a href="#愿作一切美好的信使" class="headerlink" title="愿作一切美好的信使"></a>愿作一切美好的信使</h2><p>附带 <a href="https://github.com/fomalhaut1998/hexo-theme-Fomalhaut/blob/main/source/_posts/2022-08-09-Markdown%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E5%86%99%E6%B3%95%E6%B1%87%E6%80%BB.md">MarkDown学习链接</a> <a href="https://blog.csdn.net/u014061630/article/details/81359144">CSDN参考教程</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
